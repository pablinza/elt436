

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Sun Sep  8 13:24:53 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     5                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1,noexec
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
     9                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    12                           	psect	intentry,global,class=CODE,space=0,delta=2
    13                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    14                           	dabs	1,0x7E,2
    15     0000                     
    16                           ; Generated 12/10/2023 GMT
    17                           ; 
    18                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    19                           ; All rights reserved.
    20                           ; 
    21                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    22                           ; 
    23                           ; Redistribution and use in source and binary forms, with or without modification, are
    24                           ; permitted provided that the following conditions are met:
    25                           ; 
    26                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    27                           ;        conditions and the following disclaimer.
    28                           ; 
    29                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    30                           ;        of conditions and the following disclaimer in the documentation and/or other
    31                           ;        materials provided with the distribution. Publication is not required when
    32                           ;        this file is used in an embedded application.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC16F887 Definitions
    48                           ; 
    49                           ; SFR Addresses
    50     0004                     fsr             equ	4
    51     0004                     fsr0            equ	4
    52     0000                     indf            equ	0
    53     0000                     indf0           equ	0
    54     0002                     pc              equ	2
    55     0002                     pcl             equ	2
    56     000A                     pclath          equ	10
    57     0003                     status          equ	3
    58     0000                     INDF            equ	0	;# 
    59     0001                     TMR0            equ	1	;# 
    60     0002                     PCL             equ	2	;# 
    61     0003                     STATUS          equ	3	;# 
    62     0004                     FSR             equ	4	;# 
    63     0005                     PORTA           equ	5	;# 
    64     0006                     PORTB           equ	6	;# 
    65     0007                     PORTC           equ	7	;# 
    66     0008                     PORTD           equ	8	;# 
    67     0009                     PORTE           equ	9	;# 
    68     000A                     PCLATH          equ	10	;# 
    69     000B                     INTCON          equ	11	;# 
    70     000C                     PIR1            equ	12	;# 
    71     000D                     PIR2            equ	13	;# 
    72     000E                     TMR1            equ	14	;# 
    73     000E                     TMR1L           equ	14	;# 
    74     000F                     TMR1H           equ	15	;# 
    75     0010                     T1CON           equ	16	;# 
    76     0011                     TMR2            equ	17	;# 
    77     0012                     T2CON           equ	18	;# 
    78     0013                     SSPBUF          equ	19	;# 
    79     0014                     SSPCON          equ	20	;# 
    80     0015                     CCPR1           equ	21	;# 
    81     0015                     CCPR1L          equ	21	;# 
    82     0016                     CCPR1H          equ	22	;# 
    83     0017                     CCP1CON         equ	23	;# 
    84     0018                     RCSTA           equ	24	;# 
    85     0019                     TXREG           equ	25	;# 
    86     001A                     RCREG           equ	26	;# 
    87     001B                     CCPR2           equ	27	;# 
    88     001B                     CCPR2L          equ	27	;# 
    89     001C                     CCPR2H          equ	28	;# 
    90     001D                     CCP2CON         equ	29	;# 
    91     001E                     ADRESH          equ	30	;# 
    92     001F                     ADCON0          equ	31	;# 
    93     0081                     OPTION_REG      equ	129	;# 
    94     0085                     TRISA           equ	133	;# 
    95     0086                     TRISB           equ	134	;# 
    96     0087                     TRISC           equ	135	;# 
    97     0088                     TRISD           equ	136	;# 
    98     0089                     TRISE           equ	137	;# 
    99     008C                     PIE1            equ	140	;# 
   100     008D                     PIE2            equ	141	;# 
   101     008E                     PCON            equ	142	;# 
   102     008F                     OSCCON          equ	143	;# 
   103     0090                     OSCTUNE         equ	144	;# 
   104     0091                     SSPCON2         equ	145	;# 
   105     0092                     PR2             equ	146	;# 
   106     0093                     SSPADD          equ	147	;# 
   107     0093                     SSPMSK          equ	147	;# 
   108     0093                     MSK             equ	147	;# 
   109     0094                     SSPSTAT         equ	148	;# 
   110     0095                     WPUB            equ	149	;# 
   111     0096                     IOCB            equ	150	;# 
   112     0097                     VRCON           equ	151	;# 
   113     0098                     TXSTA           equ	152	;# 
   114     0099                     SPBRG           equ	153	;# 
   115     009A                     SPBRGH          equ	154	;# 
   116     009B                     PWM1CON         equ	155	;# 
   117     009C                     ECCPAS          equ	156	;# 
   118     009D                     PSTRCON         equ	157	;# 
   119     009E                     ADRESL          equ	158	;# 
   120     009F                     ADCON1          equ	159	;# 
   121     0105                     WDTCON          equ	261	;# 
   122     0107                     CM1CON0         equ	263	;# 
   123     0108                     CM2CON0         equ	264	;# 
   124     0109                     CM2CON1         equ	265	;# 
   125     010C                     EEDATA          equ	268	;# 
   126     010C                     EEDAT           equ	268	;# 
   127     010D                     EEADR           equ	269	;# 
   128     010E                     EEDATH          equ	270	;# 
   129     010F                     EEADRH          equ	271	;# 
   130     0185                     SRCON           equ	389	;# 
   131     0187                     BAUDCTL         equ	391	;# 
   132     0188                     ANSEL           equ	392	;# 
   133     0189                     ANSELH          equ	393	;# 
   134     018C                     EECON1          equ	396	;# 
   135     018D                     EECON2          equ	397	;# 
   136     0000                     INDF            equ	0	;# 
   137     0001                     TMR0            equ	1	;# 
   138     0002                     PCL             equ	2	;# 
   139     0003                     STATUS          equ	3	;# 
   140     0004                     FSR             equ	4	;# 
   141     0005                     PORTA           equ	5	;# 
   142     0006                     PORTB           equ	6	;# 
   143     0007                     PORTC           equ	7	;# 
   144     0008                     PORTD           equ	8	;# 
   145     0009                     PORTE           equ	9	;# 
   146     000A                     PCLATH          equ	10	;# 
   147     000B                     INTCON          equ	11	;# 
   148     000C                     PIR1            equ	12	;# 
   149     000D                     PIR2            equ	13	;# 
   150     000E                     TMR1            equ	14	;# 
   151     000E                     TMR1L           equ	14	;# 
   152     000F                     TMR1H           equ	15	;# 
   153     0010                     T1CON           equ	16	;# 
   154     0011                     TMR2            equ	17	;# 
   155     0012                     T2CON           equ	18	;# 
   156     0013                     SSPBUF          equ	19	;# 
   157     0014                     SSPCON          equ	20	;# 
   158     0015                     CCPR1           equ	21	;# 
   159     0015                     CCPR1L          equ	21	;# 
   160     0016                     CCPR1H          equ	22	;# 
   161     0017                     CCP1CON         equ	23	;# 
   162     0018                     RCSTA           equ	24	;# 
   163     0019                     TXREG           equ	25	;# 
   164     001A                     RCREG           equ	26	;# 
   165     001B                     CCPR2           equ	27	;# 
   166     001B                     CCPR2L          equ	27	;# 
   167     001C                     CCPR2H          equ	28	;# 
   168     001D                     CCP2CON         equ	29	;# 
   169     001E                     ADRESH          equ	30	;# 
   170     001F                     ADCON0          equ	31	;# 
   171     0081                     OPTION_REG      equ	129	;# 
   172     0085                     TRISA           equ	133	;# 
   173     0086                     TRISB           equ	134	;# 
   174     0087                     TRISC           equ	135	;# 
   175     0088                     TRISD           equ	136	;# 
   176     0089                     TRISE           equ	137	;# 
   177     008C                     PIE1            equ	140	;# 
   178     008D                     PIE2            equ	141	;# 
   179     008E                     PCON            equ	142	;# 
   180     008F                     OSCCON          equ	143	;# 
   181     0090                     OSCTUNE         equ	144	;# 
   182     0091                     SSPCON2         equ	145	;# 
   183     0092                     PR2             equ	146	;# 
   184     0093                     SSPADD          equ	147	;# 
   185     0093                     SSPMSK          equ	147	;# 
   186     0093                     MSK             equ	147	;# 
   187     0094                     SSPSTAT         equ	148	;# 
   188     0095                     WPUB            equ	149	;# 
   189     0096                     IOCB            equ	150	;# 
   190     0097                     VRCON           equ	151	;# 
   191     0098                     TXSTA           equ	152	;# 
   192     0099                     SPBRG           equ	153	;# 
   193     009A                     SPBRGH          equ	154	;# 
   194     009B                     PWM1CON         equ	155	;# 
   195     009C                     ECCPAS          equ	156	;# 
   196     009D                     PSTRCON         equ	157	;# 
   197     009E                     ADRESL          equ	158	;# 
   198     009F                     ADCON1          equ	159	;# 
   199     0105                     WDTCON          equ	261	;# 
   200     0107                     CM1CON0         equ	263	;# 
   201     0108                     CM2CON0         equ	264	;# 
   202     0109                     CM2CON1         equ	265	;# 
   203     010C                     EEDATA          equ	268	;# 
   204     010C                     EEDAT           equ	268	;# 
   205     010D                     EEADR           equ	269	;# 
   206     010E                     EEDATH          equ	270	;# 
   207     010F                     EEADRH          equ	271	;# 
   208     0185                     SRCON           equ	389	;# 
   209     0187                     BAUDCTL         equ	391	;# 
   210     0188                     ANSEL           equ	392	;# 
   211     0189                     ANSELH          equ	393	;# 
   212     018C                     EECON1          equ	396	;# 
   213     018D                     EECON2          equ	397	;# 
   214     0009                     _PORTEbits      set	9
   215     0001                     _TMR0           set	1
   216     000B                     _INTCONbits     set	11
   217     0081                     _OPTION_REGbits set	129
   218     0089                     _TRISEbits      set	137
   219     008F                     _OSCCONbits     set	143
   220     0189                     _ANSELH         set	393
   221     0188                     _ANSEL          set	392
   222                           
   223                           	psect	cinit
   224     000F                     start_initialization:	
   225                           ; #config settings
   226                           
   227     000F                     __initialization:
   228                           
   229                           ; Clear objects allocated to BITCOMMON
   230     000F  01F6               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   231                           
   232                           ; Clear objects allocated to COMMON
   233     0010  01F4               	clrf	__pbssCOMMON& (0+127)
   234     0011  01F5               	clrf	(__pbssCOMMON+1)& (0+127)
   235     0012                     end_of_initialization:	
   236                           ;End of C runtime variable initialization code
   237                           
   238     0012                     __end_of__initialization:
   239     0012  0183               	clrf	3
   240     0013  120A  118A  2854   	ljmp	_main	;jump to C main() function
   241                           
   242                           	psect	bitbssCOMMON
   243     03B0                     __pbitbssCOMMON:
   244     03B0                     _tickms:
   245     03B0                     	ds	1
   246                           
   247                           	psect	bssCOMMON
   248     0074                     __pbssCOMMON:
   249     0074                     taskLED@cnt:
   250     0074                     	ds	2
   251                           
   252                           	psect	cstackCOMMON
   253     0070                     __pcstackCOMMON:
   254     0070                     ?_setupMCU:
   255     0070                     ?_taskLED:	
   256                           ; 1 bytes @ 0x0
   257                           
   258     0070                     ?_isr:	
   259                           ; 1 bytes @ 0x0
   260                           
   261     0070                     ?_main:	
   262                           ; 1 bytes @ 0x0
   263                           
   264     0070                     ??_isr:	
   265                           ; 1 bytes @ 0x0
   266                           
   267                           
   268                           ; 1 bytes @ 0x0
   269     0070                     	ds	2
   270     0072                     ??_setupMCU:
   271     0072                     ??_taskLED:	
   272                           ; 1 bytes @ 0x2
   273                           
   274                           
   275                           ; 1 bytes @ 0x2
   276     0072                     	ds	2
   277     0074                     ??_main:
   278                           
   279                           	psect	maintext
   280     0054                     __pmaintext:	
   281                           ; 1 bytes @ 0x4
   282 ;;
   283 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   284 ;;
   285 ;; *************** function _main *****************
   286 ;; Defined at:
   287 ;;		line 23 in file "main.c"
   288 ;; Parameters:    Size  Location     Type
   289 ;;		None
   290 ;; Auto vars:     Size  Location     Type
   291 ;;		None
   292 ;; Return value:  Size  Location     Type
   293 ;;                  1    wreg      void 
   294 ;; Registers used:
   295 ;;		wreg, status,2, status,0, pclath, cstack
   296 ;; Tracked objects:
   297 ;;		On entry : B00/0
   298 ;;		On exit  : 0/0
   299 ;;		Unchanged: 0/0
   300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   301 ;;      Params:         0       0       0       0       0
   302 ;;      Locals:         0       0       0       0       0
   303 ;;      Temps:          0       0       0       0       0
   304 ;;      Totals:         0       0       0       0       0
   305 ;;Total ram usage:        0 bytes
   306 ;; Hardware stack levels required when called: 2
   307 ;; This function calls:
   308 ;;		_setupMCU
   309 ;;		_taskLED
   310 ;; This function is called by:
   311 ;;		Startup code after reset
   312 ;; This function uses a non-reentrant model
   313 ;;
   314                           
   315     0054                     _main:	
   316                           ;psect for function _main
   317                           
   318     0054                     l634:	
   319                           ;incstack = 0
   320                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   321                           
   322                           
   323                           ;main.c: 25:     setupMCU();
   324     0054  120A  118A  2036  120A  118A  	fcall	_setupMCU
   325     0059                     l636:
   326                           
   327                           ;main.c: 27:     {;main.c: 28:         if(tickms)
   328     0059  1C76               	btfss	_tickms/(0+8),_tickms& (0+7)	;volatile
   329     005A  285C               	goto	u51
   330     005B  285D               	goto	u50
   331     005C                     u51:
   332     005C  2859               	goto	l636
   333     005D                     u50:
   334     005D                     l638:
   335                           
   336                           ;main.c: 29:         {;main.c: 30:             tickms = 0;
   337     005D  1076               	bcf	_tickms/(0+8),_tickms& (0+7)	;volatile
   338     005E                     l640:
   339                           
   340                           ;main.c: 31:             taskLED();
   341     005E  120A  118A  2016  120A  118A  	fcall	_taskLED
   342     0063  2859               	goto	l636
   343     0064  120A  118A  280C   	ljmp	start
   344     0067                     __end_of_main:
   345                           
   346                           	psect	text1
   347     0016                     __ptext1:	
   348 ;; *************** function _taskLED *****************
   349 ;; Defined at:
   350 ;;		line 53 in file "main.c"
   351 ;; Parameters:    Size  Location     Type
   352 ;;		None
   353 ;; Auto vars:     Size  Location     Type
   354 ;;		None
   355 ;; Return value:  Size  Location     Type
   356 ;;                  1    wreg      void 
   357 ;; Registers used:
   358 ;;		wreg, status,2, status,0
   359 ;; Tracked objects:
   360 ;;		On entry : 0/0
   361 ;;		On exit  : 0/0
   362 ;;		Unchanged: 0/0
   363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   364 ;;      Params:         0       0       0       0       0
   365 ;;      Locals:         0       0       0       0       0
   366 ;;      Temps:          2       0       0       0       0
   367 ;;      Totals:         2       0       0       0       0
   368 ;;Total ram usage:        2 bytes
   369 ;; Hardware stack levels used: 1
   370 ;; Hardware stack levels required when called: 1
   371 ;; This function calls:
   372 ;;		Nothing
   373 ;; This function is called by:
   374 ;;		_main
   375 ;; This function uses a non-reentrant model
   376 ;;
   377                           
   378     0016                     _taskLED:	
   379                           ;psect for function _taskLED
   380                           
   381     0016                     l616:	
   382                           ;incstack = 0
   383                           ; Regs used in _taskLED: [wreg+status,2+status,0]
   384                           
   385                           
   386                           ;main.c: 55:     static uint16_t cnt = 0;;main.c: 56:     if(cnt++ > 999)
   387     0016  0875               	movf	taskLED@cnt+1,w
   388     0017  00F3               	movwf	??_taskLED+1
   389     0018  0874               	movf	taskLED@cnt,w
   390     0019  00F2               	movwf	??_taskLED
   391     001A  0AF4               	incf	taskLED@cnt,f
   392     001B  1903               	skipnz
   393     001C  0AF5               	incf	taskLED@cnt+1,f
   394     001D  3003               	movlw	3
   395     001E  0273               	subwf	??_taskLED+1,w
   396     001F  30E8               	movlw	232
   397     0020  1903               	skipnz
   398     0021  0272               	subwf	??_taskLED,w
   399     0022  1C03               	skipc
   400     0023  2825               	goto	u21
   401     0024  2826               	goto	u20
   402     0025                     u21:
   403     0025  282B               	goto	l622
   404     0026                     u20:
   405     0026                     l618:
   406                           
   407                           ;main.c: 57:     {;main.c: 58:         cnt = 0;
   408     0026  01F4               	clrf	taskLED@cnt
   409     0027  01F5               	clrf	taskLED@cnt+1
   410     0028                     l620:
   411                           
   412                           ;main.c: 59:         PORTEbits.RE2 = 1;
   413     0028  1283               	bcf	3,5	;RP0=0, select bank0
   414     0029  1303               	bcf	3,6	;RP1=0, select bank0
   415     002A  1509               	bsf	9,2	;volatile
   416     002B                     l622:
   417                           
   418                           ;main.c: 61:     if(cnt == 200) PORTEbits.RE2 = 0;
   419     002B  30C8               	movlw	200
   420     002C  0674               	xorwf	taskLED@cnt,w
   421     002D  0475               	iorwf	taskLED@cnt+1,w
   422     002E  1D03               	btfss	3,2
   423     002F  2831               	goto	u31
   424     0030  2832               	goto	u30
   425     0031                     u31:
   426     0031  2835               	goto	l50
   427     0032                     u30:
   428     0032                     l624:
   429     0032  1283               	bcf	3,5	;RP0=0, select bank0
   430     0033  1303               	bcf	3,6	;RP1=0, select bank0
   431     0034  1109               	bcf	9,2	;volatile
   432     0035                     l50:
   433     0035  0008               	return
   434     0036                     __end_of_taskLED:
   435                           
   436                           	psect	text2
   437     0036                     __ptext2:	
   438 ;; *************** function _setupMCU *****************
   439 ;; Defined at:
   440 ;;		line 35 in file "main.c"
   441 ;; Parameters:    Size  Location     Type
   442 ;;		None
   443 ;; Auto vars:     Size  Location     Type
   444 ;;		None
   445 ;; Return value:  Size  Location     Type
   446 ;;                  1    wreg      void 
   447 ;; Registers used:
   448 ;;		wreg, status,2, status,0
   449 ;; Tracked objects:
   450 ;;		On entry : 0/0
   451 ;;		On exit  : 0/0
   452 ;;		Unchanged: 0/0
   453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   454 ;;      Params:         0       0       0       0       0
   455 ;;      Locals:         0       0       0       0       0
   456 ;;      Temps:          0       0       0       0       0
   457 ;;      Totals:         0       0       0       0       0
   458 ;;Total ram usage:        0 bytes
   459 ;; Hardware stack levels used: 1
   460 ;; Hardware stack levels required when called: 1
   461 ;; This function calls:
   462 ;;		Nothing
   463 ;; This function is called by:
   464 ;;		_main
   465 ;; This function uses a non-reentrant model
   466 ;;
   467                           
   468     0036                     _setupMCU:	
   469                           ;psect for function _setupMCU
   470                           
   471     0036                     l594:	
   472                           ;incstack = 0
   473                           ; Regs used in _setupMCU: [wreg+status,2+status,0]
   474                           
   475                           
   476                           ;main.c: 37:     OSCCONbits.IRCF = 0b111;
   477     0036  3070               	movlw	112
   478     0037  1683               	bsf	3,5	;RP0=1, select bank1
   479     0038  1303               	bcf	3,6	;RP1=0, select bank1
   480     0039  048F               	iorwf	15,f	;volatile
   481     003A                     l40:	
   482                           ;main.c: 38:     while(OSCCONbits.HTS == 0);
   483                           
   484     003A  1D0F               	btfss	15,2	;volatile
   485     003B  283D               	goto	u11
   486     003C  283E               	goto	u10
   487     003D                     u11:
   488     003D  283A               	goto	l40
   489     003E                     u10:
   490     003E                     l596:
   491                           
   492                           ;main.c: 39:     ANSEL = 0;
   493     003E  1683               	bsf	3,5	;RP0=1, select bank3
   494     003F  1703               	bsf	3,6	;RP1=1, select bank3
   495     0040  0188               	clrf	8	;volatile
   496                           
   497                           ;main.c: 40:     ANSELH = 0;
   498     0041  0189               	clrf	9	;volatile
   499     0042                     l598:
   500                           
   501                           ;main.c: 41:     TRISEbits.TRISE2 = 0;
   502     0042  1683               	bsf	3,5	;RP0=1, select bank1
   503     0043  1303               	bcf	3,6	;RP1=0, select bank1
   504     0044  1109               	bcf	9,2	;volatile
   505     0045                     l600:
   506                           
   507                           ;main.c: 42:     OPTION_REGbits.nRBPU = 0;
   508     0045  1381               	bcf	1,7	;volatile
   509     0046                     l602:
   510                           
   511                           ;main.c: 44:     OPTION_REGbits.T0CS = 0;
   512     0046  1281               	bcf	1,5	;volatile
   513     0047                     l604:
   514                           
   515                           ;main.c: 45:     OPTION_REGbits.PSA = 0;
   516     0047  1181               	bcf	1,3	;volatile
   517     0048                     l606:
   518                           
   519                           ;main.c: 46:     OPTION_REGbits.PS = 0b011;
   520     0048  0801               	movf	1,w	;volatile
   521     0049  39F8               	andlw	-8
   522     004A  3803               	iorlw	3
   523     004B  0081               	movwf	1	;volatile
   524     004C                     l608:
   525                           
   526                           ;main.c: 47:     TMR0 = 131;
   527     004C  3083               	movlw	131
   528     004D  1283               	bcf	3,5	;RP0=0, select bank0
   529     004E  1303               	bcf	3,6	;RP1=0, select bank0
   530     004F  0081               	movwf	1	;volatile
   531     0050                     l610:
   532                           
   533                           ;main.c: 48:     INTCONbits.T0IF = 0;
   534     0050  110B               	bcf	11,2	;volatile
   535     0051                     l612:
   536                           
   537                           ;main.c: 49:     INTCONbits.T0IE = 1;
   538     0051  168B               	bsf	11,5	;volatile
   539     0052                     l614:
   540                           
   541                           ;main.c: 51:     INTCONbits.GIE = 1;
   542     0052  178B               	bsf	11,7	;volatile
   543     0053                     l43:
   544     0053  0008               	return
   545     0054                     __end_of_setupMCU:
   546                           
   547                           	psect	text3
   548     0067                     __ptext3:	
   549 ;; *************** function _isr *****************
   550 ;; Defined at:
   551 ;;		line 13 in file "main.c"
   552 ;; Parameters:    Size  Location     Type
   553 ;;		None
   554 ;; Auto vars:     Size  Location     Type
   555 ;;  res             1    0        unsigned char 
   556 ;; Return value:  Size  Location     Type
   557 ;;                  1    wreg      void 
   558 ;; Registers used:
   559 ;;		wreg, status,2, status,0
   560 ;; Tracked objects:
   561 ;;		On entry : 0/0
   562 ;;		On exit  : 0/0
   563 ;;		Unchanged: 0/0
   564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   565 ;;      Params:         0       0       0       0       0
   566 ;;      Locals:         0       0       0       0       0
   567 ;;      Temps:          2       0       0       0       0
   568 ;;      Totals:         2       0       0       0       0
   569 ;;Total ram usage:        2 bytes
   570 ;; Hardware stack levels used: 1
   571 ;; This function calls:
   572 ;;		Nothing
   573 ;; This function is called by:
   574 ;;		Interrupt level 1
   575 ;; This function uses a non-reentrant model
   576 ;;
   577                           
   578     0067                     _isr:	
   579                           ;psect for function _isr
   580                           
   581     0067                     i1l626:
   582                           
   583                           ;main.c: 15:     uint8_t res;;main.c: 16:     if(INTCONbits.T0IF)
   584     0067  1D0B               	btfss	11,2	;volatile
   585     0068  286A               	goto	u4_21
   586     0069  286B               	goto	u4_20
   587     006A                     u4_21:
   588     006A  2871               	goto	i1l28
   589     006B                     u4_20:
   590     006B                     i1l628:
   591                           
   592                           ;main.c: 17:     {;main.c: 18:         INTCONbits.T0IF = 0;
   593     006B  110B               	bcf	11,2	;volatile
   594     006C                     i1l630:
   595                           
   596                           ;main.c: 19:         TMR0 += 131;
   597     006C  3083               	movlw	131
   598     006D  1283               	bcf	3,5	;RP0=0, select bank0
   599     006E  1303               	bcf	3,6	;RP1=0, select bank0
   600     006F  0781               	addwf	1,f	;volatile
   601     0070                     i1l632:
   602                           
   603                           ;main.c: 20:         tickms = 1;
   604     0070  1476               	bsf	_tickms/(0+8),_tickms& (0+7)	;volatile
   605     0071                     i1l28:
   606     0071  0871               	movf	??_isr+1,w
   607     0072  008A               	movwf	10
   608     0073  0E70               	swapf	??_isr,w
   609     0074  0083               	movwf	3
   610     0075  0EFE               	swapf	btemp,f
   611     0076  0E7E               	swapf	btemp,w
   612     0077  0009               	retfie
   613     0078                     __end_of_isr:
   614     0002                     ___latbits      equ	2
   615     007E                     btemp           set	126	;btemp
   616     007E                     wtemp0          set	126
   617                           
   618                           	psect	intentry
   619     0004                     __pintentry:	
   620                           ;incstack = 0
   621                           ; Regs used in _isr: [wreg+status,2+status,0]
   622                           
   623     0004                     interrupt_function:
   624     007E                     saved_w         set	btemp
   625     0004  00FE               	movwf	btemp
   626     0005  0E03               	swapf	3,w
   627     0006  00F0               	movwf	??_isr
   628     0007  080A               	movf	10,w
   629     0008  00F1               	movwf	??_isr+1
   630     0009  120A  118A  2867   	ljmp	_isr
   631                           
   632                           	psect	config
   633                           
   634                           ;Config register CONFIG1 @ 0x2007
   635                           ;	Oscillator Selection bits
   636                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
   637                           ;	Watchdog Timer Enable bit
   638                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
   639                           ;	Power-up Timer Enable bit
   640                           ;	PWRTE = 0x1, unprogrammed default
   641                           ;	RE3/MCLR pin function select bit
   642                           ;	MCLRE = 0x1, unprogrammed default
   643                           ;	Code Protection bit
   644                           ;	CP = 0x1, unprogrammed default
   645                           ;	Data Code Protection bit
   646                           ;	CPD = 0x1, unprogrammed default
   647                           ;	Brown Out Reset Selection bits
   648                           ;	BOREN = OFF, BOR disabled
   649                           ;	Internal External Switchover bit
   650                           ;	IESO = 0x1, unprogrammed default
   651                           ;	Fail-Safe Clock Monitor Enabled bit
   652                           ;	FCMEN = 0x1, unprogrammed default
   653                           ;	Low Voltage Programming Enable bit
   654                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
   655                           ;	In-Circuit Debugger Mode bit
   656                           ;	DEBUG = 0x1, unprogrammed default
   657     2007                     	org	8199
   658     2007  2CF4               	dw	11508

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      4       7
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_taskLED

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                           _setupMCU
                            _taskLED
 ---------------------------------------------------------------------------------
 (1) _taskLED                                              2     2      0       0
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _setupMCU                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _isr                                                  3     3      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setupMCU
   _taskLED

 _isr (ROOT)

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       1      7.1%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK3            96      0       0      0.0%
BITBANK2            96      0       0      0.0%
COMMON              14      4       7     50.0%
BANK0               80      0       0      0.0%
BANK1               80      0       0      0.0%
BANK3               96      0       0      0.0%
BANK2               96      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0       7      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Sun Sep  8 13:24:53 2024

                     l40 003A                       l50 0035                       l43 0053  
                     u10 003E                       u11 003D                       u20 0026  
                     u21 0025                       u30 0032                       u31 0031  
                     u50 005D                       u51 005C                      l600 0045  
                    l610 0050                      l602 0046                      l612 0051  
                    l604 0047                      l620 0028                      l614 0052  
                    l606 0048                      l622 002B                      l608 004C  
                    l624 0032                      l616 0016                      l640 005E  
                    l618 0026                      l634 0054                      l636 0059  
                    l638 005D                      l594 0036                      l596 003E  
                    l598 0042                      _isr 0067                     ?_isr 0070  
                   i1l28 0071                     _TMR0 0001                     u4_20 006B  
                   u4_21 006A                     _main 0054                     btemp 007E  
                   start 000C                    ??_isr 0070                    ?_main 0070  
                  _ANSEL 0188                    i1l630 006C                    i1l632 0070  
                  i1l626 0067                    i1l628 006B          __end_of_taskLED 0036  
         __pbitbssCOMMON 03B0                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 000F             __end_of_main 0067  
                 ??_main 0074                   _ANSELH 0189                   _tickms 03B0  
              ??_taskLED 0072         __end_of_setupMCU 0054                   saved_w 007E  
__end_of__initialization 0012           __pcstackCOMMON 0070           _OPTION_REGbits 0081  
             __pmaintext 0054               __pintentry 0004                ?_setupMCU 0070  
                __ptext1 0016                  __ptext2 0036                  __ptext3 0067  
                _taskLED 0016     end_of_initialization 0012               ??_setupMCU 0072  
              _PORTEbits 0009                _TRISEbits 0089      start_initialization 000F  
            __end_of_isr 0078              __pbssCOMMON 0074                ___latbits 0002  
             taskLED@cnt 0074                 ?_taskLED 0070        interrupt_function 0004  
               _setupMCU 0036               _INTCONbits 000B                 intlevel1 0000  
             _OSCCONbits 008F  
