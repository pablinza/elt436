

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Fri Sep  6 23:37:34 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     5                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1,noexec
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
     9                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	intentry,global,class=CODE,space=0,delta=2
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    15                           	dabs	1,0x7E,2
    16     0000                     
    17                           ; Generated 12/10/2023 GMT
    18                           ; 
    19                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution. Publication is not required when
    33                           ;        this file is used in an embedded application.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F887 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51     0004                     fsr             equ	4
    52     0004                     fsr0            equ	4
    53     0000                     indf            equ	0
    54     0000                     indf0           equ	0
    55     0002                     pc              equ	2
    56     0002                     pcl             equ	2
    57     000A                     pclath          equ	10
    58     0003                     status          equ	3
    59     0000                     INDF            equ	0	;# 
    60     0001                     TMR0            equ	1	;# 
    61     0002                     PCL             equ	2	;# 
    62     0003                     STATUS          equ	3	;# 
    63     0004                     FSR             equ	4	;# 
    64     0005                     PORTA           equ	5	;# 
    65     0006                     PORTB           equ	6	;# 
    66     0007                     PORTC           equ	7	;# 
    67     0008                     PORTD           equ	8	;# 
    68     0009                     PORTE           equ	9	;# 
    69     000A                     PCLATH          equ	10	;# 
    70     000B                     INTCON          equ	11	;# 
    71     000C                     PIR1            equ	12	;# 
    72     000D                     PIR2            equ	13	;# 
    73     000E                     TMR1            equ	14	;# 
    74     000E                     TMR1L           equ	14	;# 
    75     000F                     TMR1H           equ	15	;# 
    76     0010                     T1CON           equ	16	;# 
    77     0011                     TMR2            equ	17	;# 
    78     0012                     T2CON           equ	18	;# 
    79     0013                     SSPBUF          equ	19	;# 
    80     0014                     SSPCON          equ	20	;# 
    81     0015                     CCPR1           equ	21	;# 
    82     0015                     CCPR1L          equ	21	;# 
    83     0016                     CCPR1H          equ	22	;# 
    84     0017                     CCP1CON         equ	23	;# 
    85     0018                     RCSTA           equ	24	;# 
    86     0019                     TXREG           equ	25	;# 
    87     001A                     RCREG           equ	26	;# 
    88     001B                     CCPR2           equ	27	;# 
    89     001B                     CCPR2L          equ	27	;# 
    90     001C                     CCPR2H          equ	28	;# 
    91     001D                     CCP2CON         equ	29	;# 
    92     001E                     ADRESH          equ	30	;# 
    93     001F                     ADCON0          equ	31	;# 
    94     0081                     OPTION_REG      equ	129	;# 
    95     0085                     TRISA           equ	133	;# 
    96     0086                     TRISB           equ	134	;# 
    97     0087                     TRISC           equ	135	;# 
    98     0088                     TRISD           equ	136	;# 
    99     0089                     TRISE           equ	137	;# 
   100     008C                     PIE1            equ	140	;# 
   101     008D                     PIE2            equ	141	;# 
   102     008E                     PCON            equ	142	;# 
   103     008F                     OSCCON          equ	143	;# 
   104     0090                     OSCTUNE         equ	144	;# 
   105     0091                     SSPCON2         equ	145	;# 
   106     0092                     PR2             equ	146	;# 
   107     0093                     SSPADD          equ	147	;# 
   108     0093                     SSPMSK          equ	147	;# 
   109     0093                     MSK             equ	147	;# 
   110     0094                     SSPSTAT         equ	148	;# 
   111     0095                     WPUB            equ	149	;# 
   112     0096                     IOCB            equ	150	;# 
   113     0097                     VRCON           equ	151	;# 
   114     0098                     TXSTA           equ	152	;# 
   115     0099                     SPBRG           equ	153	;# 
   116     009A                     SPBRGH          equ	154	;# 
   117     009B                     PWM1CON         equ	155	;# 
   118     009C                     ECCPAS          equ	156	;# 
   119     009D                     PSTRCON         equ	157	;# 
   120     009E                     ADRESL          equ	158	;# 
   121     009F                     ADCON1          equ	159	;# 
   122     0105                     WDTCON          equ	261	;# 
   123     0107                     CM1CON0         equ	263	;# 
   124     0108                     CM2CON0         equ	264	;# 
   125     0109                     CM2CON1         equ	265	;# 
   126     010C                     EEDATA          equ	268	;# 
   127     010C                     EEDAT           equ	268	;# 
   128     010D                     EEADR           equ	269	;# 
   129     010E                     EEDATH          equ	270	;# 
   130     010F                     EEADRH          equ	271	;# 
   131     0185                     SRCON           equ	389	;# 
   132     0187                     BAUDCTL         equ	391	;# 
   133     0188                     ANSEL           equ	392	;# 
   134     0189                     ANSELH          equ	393	;# 
   135     018C                     EECON1          equ	396	;# 
   136     018D                     EECON2          equ	397	;# 
   137     0000                     INDF            equ	0	;# 
   138     0001                     TMR0            equ	1	;# 
   139     0002                     PCL             equ	2	;# 
   140     0003                     STATUS          equ	3	;# 
   141     0004                     FSR             equ	4	;# 
   142     0005                     PORTA           equ	5	;# 
   143     0006                     PORTB           equ	6	;# 
   144     0007                     PORTC           equ	7	;# 
   145     0008                     PORTD           equ	8	;# 
   146     0009                     PORTE           equ	9	;# 
   147     000A                     PCLATH          equ	10	;# 
   148     000B                     INTCON          equ	11	;# 
   149     000C                     PIR1            equ	12	;# 
   150     000D                     PIR2            equ	13	;# 
   151     000E                     TMR1            equ	14	;# 
   152     000E                     TMR1L           equ	14	;# 
   153     000F                     TMR1H           equ	15	;# 
   154     0010                     T1CON           equ	16	;# 
   155     0011                     TMR2            equ	17	;# 
   156     0012                     T2CON           equ	18	;# 
   157     0013                     SSPBUF          equ	19	;# 
   158     0014                     SSPCON          equ	20	;# 
   159     0015                     CCPR1           equ	21	;# 
   160     0015                     CCPR1L          equ	21	;# 
   161     0016                     CCPR1H          equ	22	;# 
   162     0017                     CCP1CON         equ	23	;# 
   163     0018                     RCSTA           equ	24	;# 
   164     0019                     TXREG           equ	25	;# 
   165     001A                     RCREG           equ	26	;# 
   166     001B                     CCPR2           equ	27	;# 
   167     001B                     CCPR2L          equ	27	;# 
   168     001C                     CCPR2H          equ	28	;# 
   169     001D                     CCP2CON         equ	29	;# 
   170     001E                     ADRESH          equ	30	;# 
   171     001F                     ADCON0          equ	31	;# 
   172     0081                     OPTION_REG      equ	129	;# 
   173     0085                     TRISA           equ	133	;# 
   174     0086                     TRISB           equ	134	;# 
   175     0087                     TRISC           equ	135	;# 
   176     0088                     TRISD           equ	136	;# 
   177     0089                     TRISE           equ	137	;# 
   178     008C                     PIE1            equ	140	;# 
   179     008D                     PIE2            equ	141	;# 
   180     008E                     PCON            equ	142	;# 
   181     008F                     OSCCON          equ	143	;# 
   182     0090                     OSCTUNE         equ	144	;# 
   183     0091                     SSPCON2         equ	145	;# 
   184     0092                     PR2             equ	146	;# 
   185     0093                     SSPADD          equ	147	;# 
   186     0093                     SSPMSK          equ	147	;# 
   187     0093                     MSK             equ	147	;# 
   188     0094                     SSPSTAT         equ	148	;# 
   189     0095                     WPUB            equ	149	;# 
   190     0096                     IOCB            equ	150	;# 
   191     0097                     VRCON           equ	151	;# 
   192     0098                     TXSTA           equ	152	;# 
   193     0099                     SPBRG           equ	153	;# 
   194     009A                     SPBRGH          equ	154	;# 
   195     009B                     PWM1CON         equ	155	;# 
   196     009C                     ECCPAS          equ	156	;# 
   197     009D                     PSTRCON         equ	157	;# 
   198     009E                     ADRESL          equ	158	;# 
   199     009F                     ADCON1          equ	159	;# 
   200     0105                     WDTCON          equ	261	;# 
   201     0107                     CM1CON0         equ	263	;# 
   202     0108                     CM2CON0         equ	264	;# 
   203     0109                     CM2CON1         equ	265	;# 
   204     010C                     EEDATA          equ	268	;# 
   205     010C                     EEDAT           equ	268	;# 
   206     010D                     EEADR           equ	269	;# 
   207     010E                     EEDATH          equ	270	;# 
   208     010F                     EEADRH          equ	271	;# 
   209     0185                     SRCON           equ	389	;# 
   210     0187                     BAUDCTL         equ	391	;# 
   211     0188                     ANSEL           equ	392	;# 
   212     0189                     ANSELH          equ	393	;# 
   213     018C                     EECON1          equ	396	;# 
   214     018D                     EECON2          equ	397	;# 
   215     0009                     _PORTEbits      set	9
   216     0008                     _PORTDbits      set	8
   217     0001                     _TMR0           set	1
   218     000B                     _INTCONbits     set	11
   219     0081                     _OPTION_REGbits set	129
   220     0089                     _TRISEbits      set	137
   221     0088                     _TRISDbits      set	136
   222     008F                     _OSCCONbits     set	143
   223     0189                     _ANSELH         set	393
   224     0188                     _ANSEL          set	392
   225                           
   226                           	psect	cinit
   227     000F                     start_initialization:	
   228                           ; #config settings
   229                           
   230     000F                     __initialization:
   231                           
   232                           ; Clear objects allocated to BITCOMMON
   233     000F  01F8               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   234                           
   235                           ; Clear objects allocated to COMMON
   236     0010  01F0               	clrf	__pbssCOMMON& (0+127)
   237     0011  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   238     0012  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   239     0013  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   240     0014                     end_of_initialization:	
   241                           ;End of C runtime variable initialization code
   242                           
   243     0014                     __end_of__initialization:
   244     0014  0183               	clrf	3
   245     0015  120A  118A  287D   	ljmp	_main	;jump to C main() function
   246                           
   247                           	psect	bitbssCOMMON
   248     03C0                     __pbitbssCOMMON:
   249     03C0                     _tickms:
   250     03C0                     	ds	1
   251                           
   252                           	psect	bssCOMMON
   253     0070                     __pbssCOMMON:
   254     0070                     taskLED2@tcnt:
   255     0070                     	ds	2
   256     0072                     taskLED1@tcnt:
   257     0072                     	ds	2
   258                           
   259                           	psect	cstackCOMMON
   260     0074                     __pcstackCOMMON:
   261     0074                     ?_setupMCU:
   262     0074                     ?_taskLED1:	
   263                           ; 1 bytes @ 0x0
   264                           
   265     0074                     ?_taskLED2:	
   266                           ; 1 bytes @ 0x0
   267                           
   268     0074                     ?_isr:	
   269                           ; 1 bytes @ 0x0
   270                           
   271     0074                     ?_main:	
   272                           ; 1 bytes @ 0x0
   273                           
   274     0074                     ??_isr:	
   275                           ; 1 bytes @ 0x0
   276                           
   277                           
   278                           ; 1 bytes @ 0x0
   279     0074                     	ds	2
   280     0076                     ??_setupMCU:
   281     0076                     ??_taskLED1:	
   282                           ; 1 bytes @ 0x2
   283                           
   284     0076                     ??_taskLED2:	
   285                           ; 1 bytes @ 0x2
   286                           
   287                           
   288                           ; 1 bytes @ 0x2
   289     0076                     	ds	2
   290     0078                     ??_main:
   291                           
   292                           	psect	maintext
   293     007D                     __pmaintext:	
   294                           ; 1 bytes @ 0x4
   295 ;;
   296 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   297 ;;
   298 ;; *************** function _main *****************
   299 ;; Defined at:
   300 ;;		line 25 in file "main.c"
   301 ;; Parameters:    Size  Location     Type
   302 ;;		None
   303 ;; Auto vars:     Size  Location     Type
   304 ;;		None
   305 ;; Return value:  Size  Location     Type
   306 ;;                  1    wreg      void 
   307 ;; Registers used:
   308 ;;		wreg, status,2, status,0, pclath, cstack
   309 ;; Tracked objects:
   310 ;;		On entry : B00/0
   311 ;;		On exit  : 0/0
   312 ;;		Unchanged: 0/0
   313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   314 ;;      Params:         0       0       0       0       0
   315 ;;      Locals:         0       0       0       0       0
   316 ;;      Temps:          0       0       0       0       0
   317 ;;      Totals:         0       0       0       0       0
   318 ;;Total ram usage:        0 bytes
   319 ;; Hardware stack levels required when called: 2
   320 ;; This function calls:
   321 ;;		_setupMCU
   322 ;;		_taskLED1
   323 ;;		_taskLED2
   324 ;; This function is called by:
   325 ;;		Startup code after reset
   326 ;; This function uses a non-reentrant model
   327 ;;
   328                           
   329     007D                     _main:	
   330                           ;psect for function _main
   331                           
   332     007D                     l663:	
   333                           ;incstack = 0
   334                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   335                           
   336                           
   337                           ;main.c: 27:     setupMCU();
   338     007D  120A  118A  2018  120A  118A  	fcall	_setupMCU
   339     0082                     l665:
   340                           
   341                           ;main.c: 29:     {;main.c: 30:         if(tickms)
   342     0082  1C78               	btfss	_tickms/(0+8),_tickms& (0+7)	;volatile
   343     0083  2885               	goto	u71
   344     0084  2886               	goto	u70
   345     0085                     u71:
   346     0085  2882               	goto	l665
   347     0086                     u70:
   348     0086                     l667:
   349                           
   350                           ;main.c: 31:         {;main.c: 32:             tickms = 0;
   351     0086  1078               	bcf	_tickms/(0+8),_tickms& (0+7)	;volatile
   352     0087                     l669:
   353                           
   354                           ;main.c: 33:             taskLED1();
   355     0087  120A  118A  205D  120A  118A  	fcall	_taskLED1
   356                           
   357                           ;main.c: 34:             taskLED2();
   358     008C  120A  118A  203D  120A  118A  	fcall	_taskLED2
   359     0091  2882               	goto	l665
   360     0092  120A  118A  280C   	ljmp	start
   361     0095                     __end_of_main:
   362                           
   363                           	psect	text1
   364     003D                     __ptext1:	
   365 ;; *************** function _taskLED2 *****************
   366 ;; Defined at:
   367 ;;		line 69 in file "main.c"
   368 ;; Parameters:    Size  Location     Type
   369 ;;		None
   370 ;; Auto vars:     Size  Location     Type
   371 ;;		None
   372 ;; Return value:  Size  Location     Type
   373 ;;                  1    wreg      void 
   374 ;; Registers used:
   375 ;;		wreg, status,2, status,0
   376 ;; Tracked objects:
   377 ;;		On entry : 0/0
   378 ;;		On exit  : 0/0
   379 ;;		Unchanged: 0/0
   380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   381 ;;      Params:         0       0       0       0       0
   382 ;;      Locals:         0       0       0       0       0
   383 ;;      Temps:          2       0       0       0       0
   384 ;;      Totals:         2       0       0       0       0
   385 ;;Total ram usage:        2 bytes
   386 ;; Hardware stack levels used: 1
   387 ;; Hardware stack levels required when called: 1
   388 ;; This function calls:
   389 ;;		Nothing
   390 ;; This function is called by:
   391 ;;		_main
   392 ;; This function uses a non-reentrant model
   393 ;;
   394                           
   395     003D                     _taskLED2:	
   396                           ;psect for function _taskLED2
   397                           
   398     003D                     l645:	
   399                           ;incstack = 0
   400                           ; Regs used in _taskLED2: [wreg+status,2+status,0]
   401                           
   402                           
   403                           ;main.c: 71:     static uint16_t tcnt = 0;;main.c: 72:     if(tcnt++ > 199)
   404     003D  0871               	movf	taskLED2@tcnt+1,w
   405     003E  00F7               	movwf	??_taskLED2+1
   406     003F  0870               	movf	taskLED2@tcnt,w
   407     0040  00F6               	movwf	??_taskLED2
   408     0041  0AF0               	incf	taskLED2@tcnt,f
   409     0042  1903               	skipnz
   410     0043  0AF1               	incf	taskLED2@tcnt+1,f
   411     0044  3000               	movlw	0
   412     0045  0277               	subwf	??_taskLED2+1,w
   413     0046  30C8               	movlw	200
   414     0047  1903               	skipnz
   415     0048  0276               	subwf	??_taskLED2,w
   416     0049  1C03               	skipc
   417     004A  284C               	goto	u41
   418     004B  284D               	goto	u40
   419     004C                     u41:
   420     004C  2852               	goto	l651
   421     004D                     u40:
   422     004D                     l647:
   423                           
   424                           ;main.c: 73:     {;main.c: 74:         tcnt = 0;
   425     004D  01F0               	clrf	taskLED2@tcnt
   426     004E  01F1               	clrf	taskLED2@tcnt+1
   427     004F                     l649:
   428                           
   429                           ;main.c: 75:         PORTDbits.RD0 = 1;
   430     004F  1283               	bcf	3,5	;RP0=0, select bank0
   431     0050  1303               	bcf	3,6	;RP1=0, select bank0
   432     0051  1408               	bsf	8,0	;volatile
   433     0052                     l651:
   434                           
   435                           ;main.c: 77:     if(tcnt == 100) PORTDbits.RD0 = 0;
   436     0052  3064               	movlw	100
   437     0053  0670               	xorwf	taskLED2@tcnt,w
   438     0054  0471               	iorwf	taskLED2@tcnt+1,w
   439     0055  1D03               	btfss	3,2
   440     0056  2858               	goto	u51
   441     0057  2859               	goto	u50
   442     0058                     u51:
   443     0058  285C               	goto	l63
   444     0059                     u50:
   445     0059                     l653:
   446     0059  1283               	bcf	3,5	;RP0=0, select bank0
   447     005A  1303               	bcf	3,6	;RP1=0, select bank0
   448     005B  1008               	bcf	8,0	;volatile
   449     005C                     l63:
   450     005C  0008               	return
   451     005D                     __end_of_taskLED2:
   452                           
   453                           	psect	text2
   454     005D                     __ptext2:	
   455 ;; *************** function _taskLED1 *****************
   456 ;; Defined at:
   457 ;;		line 59 in file "main.c"
   458 ;; Parameters:    Size  Location     Type
   459 ;;		None
   460 ;; Auto vars:     Size  Location     Type
   461 ;;		None
   462 ;; Return value:  Size  Location     Type
   463 ;;                  1    wreg      void 
   464 ;; Registers used:
   465 ;;		wreg, status,2, status,0
   466 ;; Tracked objects:
   467 ;;		On entry : 0/0
   468 ;;		On exit  : 0/0
   469 ;;		Unchanged: 0/0
   470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   471 ;;      Params:         0       0       0       0       0
   472 ;;      Locals:         0       0       0       0       0
   473 ;;      Temps:          2       0       0       0       0
   474 ;;      Totals:         2       0       0       0       0
   475 ;;Total ram usage:        2 bytes
   476 ;; Hardware stack levels used: 1
   477 ;; Hardware stack levels required when called: 1
   478 ;; This function calls:
   479 ;;		Nothing
   480 ;; This function is called by:
   481 ;;		_main
   482 ;; This function uses a non-reentrant model
   483 ;;
   484                           
   485     005D                     _taskLED1:	
   486                           ;psect for function _taskLED1
   487                           
   488     005D                     l635:	
   489                           ;incstack = 0
   490                           ; Regs used in _taskLED1: [wreg+status,2+status,0]
   491                           
   492                           
   493                           ;main.c: 61:     static uint16_t tcnt = 0;;main.c: 62:     if(tcnt++ > 999)
   494     005D  0873               	movf	taskLED1@tcnt+1,w
   495     005E  00F7               	movwf	??_taskLED1+1
   496     005F  0872               	movf	taskLED1@tcnt,w
   497     0060  00F6               	movwf	??_taskLED1
   498     0061  0AF2               	incf	taskLED1@tcnt,f
   499     0062  1903               	skipnz
   500     0063  0AF3               	incf	taskLED1@tcnt+1,f
   501     0064  3003               	movlw	3
   502     0065  0277               	subwf	??_taskLED1+1,w
   503     0066  30E8               	movlw	232
   504     0067  1903               	skipnz
   505     0068  0276               	subwf	??_taskLED1,w
   506     0069  1C03               	skipc
   507     006A  286C               	goto	u21
   508     006B  286D               	goto	u20
   509     006C                     u21:
   510     006C  2872               	goto	l641
   511     006D                     u20:
   512     006D                     l637:
   513                           
   514                           ;main.c: 63:     {;main.c: 64:         tcnt = 0;
   515     006D  01F2               	clrf	taskLED1@tcnt
   516     006E  01F3               	clrf	taskLED1@tcnt+1
   517     006F                     l639:
   518                           
   519                           ;main.c: 65:         PORTEbits.RE2 = 1;
   520     006F  1283               	bcf	3,5	;RP0=0, select bank0
   521     0070  1303               	bcf	3,6	;RP1=0, select bank0
   522     0071  1509               	bsf	9,2	;volatile
   523     0072                     l641:
   524                           
   525                           ;main.c: 67:     if(tcnt == 200) PORTEbits.RE2 = 0;
   526     0072  30C8               	movlw	200
   527     0073  0672               	xorwf	taskLED1@tcnt,w
   528     0074  0473               	iorwf	taskLED1@tcnt+1,w
   529     0075  1D03               	btfss	3,2
   530     0076  2878               	goto	u31
   531     0077  2879               	goto	u30
   532     0078                     u31:
   533     0078  287C               	goto	l56
   534     0079                     u30:
   535     0079                     l643:
   536     0079  1283               	bcf	3,5	;RP0=0, select bank0
   537     007A  1303               	bcf	3,6	;RP1=0, select bank0
   538     007B  1109               	bcf	9,2	;volatile
   539     007C                     l56:
   540     007C  0008               	return
   541     007D                     __end_of_taskLED1:
   542                           
   543                           	psect	text3
   544     0018                     __ptext3:	
   545 ;; *************** function _setupMCU *****************
   546 ;; Defined at:
   547 ;;		line 38 in file "main.c"
   548 ;; Parameters:    Size  Location     Type
   549 ;;		None
   550 ;; Auto vars:     Size  Location     Type
   551 ;;		None
   552 ;; Return value:  Size  Location     Type
   553 ;;                  1    wreg      void 
   554 ;; Registers used:
   555 ;;		wreg, status,2, status,0
   556 ;; Tracked objects:
   557 ;;		On entry : 0/0
   558 ;;		On exit  : 0/0
   559 ;;		Unchanged: 0/0
   560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   561 ;;      Params:         0       0       0       0       0
   562 ;;      Locals:         0       0       0       0       0
   563 ;;      Temps:          0       0       0       0       0
   564 ;;      Totals:         0       0       0       0       0
   565 ;;Total ram usage:        0 bytes
   566 ;; Hardware stack levels used: 1
   567 ;; Hardware stack levels required when called: 1
   568 ;; This function calls:
   569 ;;		Nothing
   570 ;; This function is called by:
   571 ;;		_main
   572 ;; This function uses a non-reentrant model
   573 ;;
   574                           
   575     0018                     _setupMCU:	
   576                           ;psect for function _setupMCU
   577                           
   578     0018                     l607:	
   579                           ;incstack = 0
   580                           ; Regs used in _setupMCU: [wreg+status,2+status,0]
   581                           
   582                           
   583                           ;main.c: 40:     OSCCONbits.IRCF = 0b111;
   584     0018  3070               	movlw	112
   585     0019  1683               	bsf	3,5	;RP0=1, select bank1
   586     001A  1303               	bcf	3,6	;RP1=0, select bank1
   587     001B  048F               	iorwf	15,f	;volatile
   588     001C                     l46:	
   589                           ;main.c: 41:     while(OSCCONbits.HTS == 0);
   590                           
   591     001C  1D0F               	btfss	15,2	;volatile
   592     001D  281F               	goto	u11
   593     001E  2820               	goto	u10
   594     001F                     u11:
   595     001F  281C               	goto	l46
   596     0020                     u10:
   597     0020                     l609:
   598                           
   599                           ;main.c: 42:     ANSEL = 0;
   600     0020  1683               	bsf	3,5	;RP0=1, select bank3
   601     0021  1703               	bsf	3,6	;RP1=1, select bank3
   602     0022  0188               	clrf	8	;volatile
   603                           
   604                           ;main.c: 43:     ANSELH = 0;
   605     0023  0189               	clrf	9	;volatile
   606     0024                     l611:
   607                           
   608                           ;main.c: 44:     TRISDbits.TRISD0 = 0;
   609     0024  1683               	bsf	3,5	;RP0=1, select bank1
   610     0025  1303               	bcf	3,6	;RP1=0, select bank1
   611     0026  1008               	bcf	8,0	;volatile
   612     0027                     l613:
   613                           
   614                           ;main.c: 45:     TRISEbits.TRISE2 = 0;
   615     0027  1109               	bcf	9,2	;volatile
   616     0028                     l615:
   617                           
   618                           ;main.c: 46:     PORTDbits.RD0 = 0;
   619     0028  1283               	bcf	3,5	;RP0=0, select bank0
   620     0029  1303               	bcf	3,6	;RP1=0, select bank0
   621     002A  1008               	bcf	8,0	;volatile
   622     002B                     l617:
   623                           
   624                           ;main.c: 47:     PORTEbits.RE2 = 0;
   625     002B  1109               	bcf	9,2	;volatile
   626     002C                     l619:
   627                           
   628                           ;main.c: 48:     OPTION_REGbits.nRBPU = 0;
   629     002C  1683               	bsf	3,5	;RP0=1, select bank1
   630     002D  1303               	bcf	3,6	;RP1=0, select bank1
   631     002E  1381               	bcf	1,7	;volatile
   632     002F                     l621:
   633                           
   634                           ;main.c: 50:     OPTION_REGbits.T0CS = 0;
   635     002F  1281               	bcf	1,5	;volatile
   636     0030                     l623:
   637                           
   638                           ;main.c: 51:     OPTION_REGbits.PSA = 0;
   639     0030  1181               	bcf	1,3	;volatile
   640     0031                     l625:
   641                           
   642                           ;main.c: 52:     OPTION_REGbits.PS = 0b011;
   643     0031  0801               	movf	1,w	;volatile
   644     0032  39F8               	andlw	-8
   645     0033  3803               	iorlw	3
   646     0034  0081               	movwf	1	;volatile
   647     0035                     l627:
   648                           
   649                           ;main.c: 53:     TMR0 = 131;
   650     0035  3083               	movlw	131
   651     0036  1283               	bcf	3,5	;RP0=0, select bank0
   652     0037  1303               	bcf	3,6	;RP1=0, select bank0
   653     0038  0081               	movwf	1	;volatile
   654     0039                     l629:
   655                           
   656                           ;main.c: 54:     INTCONbits.T0IF = 0;
   657     0039  110B               	bcf	11,2	;volatile
   658     003A                     l631:
   659                           
   660                           ;main.c: 55:     INTCONbits.T0IE = 1;
   661     003A  168B               	bsf	11,5	;volatile
   662     003B                     l633:
   663                           
   664                           ;main.c: 57:     INTCONbits.GIE = 1;
   665     003B  178B               	bsf	11,7	;volatile
   666     003C                     l49:
   667     003C  0008               	return
   668     003D                     __end_of_setupMCU:
   669                           
   670                           	psect	text4
   671     0095                     __ptext4:	
   672 ;; *************** function _isr *****************
   673 ;; Defined at:
   674 ;;		line 16 in file "main.c"
   675 ;; Parameters:    Size  Location     Type
   676 ;;		None
   677 ;; Auto vars:     Size  Location     Type
   678 ;;		None
   679 ;; Return value:  Size  Location     Type
   680 ;;                  1    wreg      void 
   681 ;; Registers used:
   682 ;;		wreg, status,2, status,0
   683 ;; Tracked objects:
   684 ;;		On entry : 0/0
   685 ;;		On exit  : 0/0
   686 ;;		Unchanged: 0/0
   687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   688 ;;      Params:         0       0       0       0       0
   689 ;;      Locals:         0       0       0       0       0
   690 ;;      Temps:          2       0       0       0       0
   691 ;;      Totals:         2       0       0       0       0
   692 ;;Total ram usage:        2 bytes
   693 ;; Hardware stack levels used: 1
   694 ;; This function calls:
   695 ;;		Nothing
   696 ;; This function is called by:
   697 ;;		Interrupt level 1
   698 ;; This function uses a non-reentrant model
   699 ;;
   700                           
   701     0095                     _isr:	
   702                           ;psect for function _isr
   703                           
   704     0095                     i1l655:
   705                           
   706                           ;main.c: 18:     if(INTCONbits.T0IF)
   707     0095  1D0B               	btfss	11,2	;volatile
   708     0096  2898               	goto	u6_21
   709     0097  2899               	goto	u6_20
   710     0098                     u6_21:
   711     0098  289F               	goto	i1l34
   712     0099                     u6_20:
   713     0099                     i1l657:
   714                           
   715                           ;main.c: 19:     {;main.c: 20:         INTCONbits.T0IF = 0;
   716     0099  110B               	bcf	11,2	;volatile
   717     009A                     i1l659:
   718                           
   719                           ;main.c: 21:         TMR0 += 131;
   720     009A  3083               	movlw	131
   721     009B  1283               	bcf	3,5	;RP0=0, select bank0
   722     009C  1303               	bcf	3,6	;RP1=0, select bank0
   723     009D  0781               	addwf	1,f	;volatile
   724     009E                     i1l661:
   725                           
   726                           ;main.c: 22:         tickms = 1;
   727     009E  1478               	bsf	_tickms/(0+8),_tickms& (0+7)	;volatile
   728     009F                     i1l34:
   729     009F  0875               	movf	??_isr+1,w
   730     00A0  008A               	movwf	10
   731     00A1  0E74               	swapf	??_isr,w
   732     00A2  0083               	movwf	3
   733     00A3  0EFE               	swapf	btemp,f
   734     00A4  0E7E               	swapf	btemp,w
   735     00A5  0009               	retfie
   736     00A6                     __end_of_isr:
   737     0002                     ___latbits      equ	2
   738     007E                     btemp           set	126	;btemp
   739     007E                     wtemp0          set	126
   740                           
   741                           	psect	intentry
   742     0004                     __pintentry:	
   743                           ;incstack = 0
   744                           ; Regs used in _isr: [wreg+status,2+status,0]
   745                           
   746     0004                     interrupt_function:
   747     007E                     saved_w         set	btemp
   748     0004  00FE               	movwf	btemp
   749     0005  0E03               	swapf	3,w
   750     0006  00F4               	movwf	??_isr
   751     0007  080A               	movf	10,w
   752     0008  00F5               	movwf	??_isr+1
   753     0009  120A  118A  2895   	ljmp	_isr
   754                           
   755                           	psect	config
   756                           
   757                           ;Config register CONFIG1 @ 0x2007
   758                           ;	Oscillator Selection bits
   759                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
   760                           ;	Watchdog Timer Enable bit
   761                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
   762                           ;	Power-up Timer Enable bit
   763                           ;	PWRTE = 0x1, unprogrammed default
   764                           ;	RE3/MCLR pin function select bit
   765                           ;	MCLRE = 0x1, unprogrammed default
   766                           ;	Code Protection bit
   767                           ;	CP = 0x1, unprogrammed default
   768                           ;	Data Code Protection bit
   769                           ;	CPD = 0x1, unprogrammed default
   770                           ;	Brown Out Reset Selection bits
   771                           ;	BOREN = OFF, BOR disabled
   772                           ;	Internal External Switchover bit
   773                           ;	IESO = 0x1, unprogrammed default
   774                           ;	Fail-Safe Clock Monitor Enabled bit
   775                           ;	FCMEN = 0x1, unprogrammed default
   776                           ;	Low Voltage Programming Enable bit
   777                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
   778                           ;	In-Circuit Debugger Mode bit
   779                           ;	DEBUG = 0x1, unprogrammed default
   780     2007                     	org	8199
   781     2007  2CF4               	dw	11508

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         5
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      4       9
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_taskLED1
    _main->_taskLED2

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                           _setupMCU
                           _taskLED1
                           _taskLED2
 ---------------------------------------------------------------------------------
 (1) _taskLED2                                             2     2      0       0
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _taskLED1                                             2     2      0       0
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _setupMCU                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _isr                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setupMCU
   _taskLED1
   _taskLED2

 _isr (ROOT)

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       1      7.1%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK3            96      0       0      0.0%
BITBANK2            96      0       0      0.0%
COMMON              14      4       9     64.3%
BANK0               80      0       0      0.0%
BANK1               80      0       0      0.0%
BANK3               96      0       0      0.0%
BANK2               96      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0       9      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Fri Sep  6 23:37:34 2024

                     l46 001C                       l63 005C                       l56 007C  
                     l49 003C                       u10 0020                       u11 001F  
                     u20 006D                       u21 006C                       u30 0079  
                     u31 0078                       u40 004D                       u41 004C  
                     u50 0059                       u51 0058                       u70 0086  
                     u71 0085                      l611 0024                      l621 002F  
                    l613 0027                      l631 003A                      l623 0030  
                    l615 0028                      l607 0018                      l633 003B  
                    l625 0031                      l617 002B                      l609 0020  
                    l641 0072                      l627 0035                      l619 002C  
                    l643 0079                      l635 005D                      l651 0052  
                    l629 0039                      l637 006D                      l653 0059  
                    l645 003D                      l639 006F                      l647 004D  
                    l663 007D                      l649 004F                      l665 0082  
                    l667 0086                      l669 0087                      _isr 0095  
                   ?_isr 0074                     i1l34 009F                     _TMR0 0001  
                   u6_20 0099                     u6_21 0098                     _main 007D  
                   btemp 007E                     start 000C                    ??_isr 0074  
                  ?_main 0074                    _ANSEL 0188                    i1l661 009E  
                  i1l655 0095                    i1l657 0099                    i1l659 009A  
         __pbitbssCOMMON 03C0                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 000F             __end_of_main 0095  
                 ??_main 0078                   _ANSELH 0189                   _tickms 03C0  
       __end_of_taskLED1 007D         __end_of_taskLED2 005D         __end_of_setupMCU 003D  
                 saved_w 007E  __end_of__initialization 0014           __pcstackCOMMON 0074  
         _OPTION_REGbits 0081               __pmaintext 007D               __pintentry 0004  
              ?_taskLED1 0074                ?_taskLED2 0074                ?_setupMCU 0074  
                __ptext1 003D                  __ptext2 005D                  __ptext3 0018  
                __ptext4 0095     end_of_initialization 0014               ??_taskLED1 0076  
             ??_taskLED2 0076               ??_setupMCU 0076                _PORTDbits 0008  
              _PORTEbits 0009                _TRISDbits 0088                _TRISEbits 0089  
    start_initialization 000F              __end_of_isr 00A6             taskLED1@tcnt 0072  
           taskLED2@tcnt 0070              __pbssCOMMON 0070                ___latbits 0002  
      interrupt_function 0004                 _taskLED1 005D                 _taskLED2 003D  
               _setupMCU 0018               _INTCONbits 000B                 intlevel1 0000  
             _OSCCONbits 008F  
