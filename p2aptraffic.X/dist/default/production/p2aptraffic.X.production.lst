

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Sat Sep  7 00:34:33 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     5                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1,noexec
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    11                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    17                           	psect	intentry,global,class=CODE,space=0,delta=2
    18                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    19                           	dabs	1,0x7E,2
    20     0000                     
    21                           ; Generated 12/10/2023 GMT
    22                           ; 
    23                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution. Publication is not required when
    37                           ;        this file is used in an embedded application.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC16F887 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55     0004                     fsr             equ	4
    56     0004                     fsr0            equ	4
    57     0000                     indf            equ	0
    58     0000                     indf0           equ	0
    59     0002                     pc              equ	2
    60     0002                     pcl             equ	2
    61     000A                     pclath          equ	10
    62     0003                     status          equ	3
    63     0000                     INDF            equ	0	;# 
    64     0001                     TMR0            equ	1	;# 
    65     0002                     PCL             equ	2	;# 
    66     0003                     STATUS          equ	3	;# 
    67     0004                     FSR             equ	4	;# 
    68     0005                     PORTA           equ	5	;# 
    69     0006                     PORTB           equ	6	;# 
    70     0007                     PORTC           equ	7	;# 
    71     0008                     PORTD           equ	8	;# 
    72     0009                     PORTE           equ	9	;# 
    73     000A                     PCLATH          equ	10	;# 
    74     000B                     INTCON          equ	11	;# 
    75     000C                     PIR1            equ	12	;# 
    76     000D                     PIR2            equ	13	;# 
    77     000E                     TMR1            equ	14	;# 
    78     000E                     TMR1L           equ	14	;# 
    79     000F                     TMR1H           equ	15	;# 
    80     0010                     T1CON           equ	16	;# 
    81     0011                     TMR2            equ	17	;# 
    82     0012                     T2CON           equ	18	;# 
    83     0013                     SSPBUF          equ	19	;# 
    84     0014                     SSPCON          equ	20	;# 
    85     0015                     CCPR1           equ	21	;# 
    86     0015                     CCPR1L          equ	21	;# 
    87     0016                     CCPR1H          equ	22	;# 
    88     0017                     CCP1CON         equ	23	;# 
    89     0018                     RCSTA           equ	24	;# 
    90     0019                     TXREG           equ	25	;# 
    91     001A                     RCREG           equ	26	;# 
    92     001B                     CCPR2           equ	27	;# 
    93     001B                     CCPR2L          equ	27	;# 
    94     001C                     CCPR2H          equ	28	;# 
    95     001D                     CCP2CON         equ	29	;# 
    96     001E                     ADRESH          equ	30	;# 
    97     001F                     ADCON0          equ	31	;# 
    98     0081                     OPTION_REG      equ	129	;# 
    99     0085                     TRISA           equ	133	;# 
   100     0086                     TRISB           equ	134	;# 
   101     0087                     TRISC           equ	135	;# 
   102     0088                     TRISD           equ	136	;# 
   103     0089                     TRISE           equ	137	;# 
   104     008C                     PIE1            equ	140	;# 
   105     008D                     PIE2            equ	141	;# 
   106     008E                     PCON            equ	142	;# 
   107     008F                     OSCCON          equ	143	;# 
   108     0090                     OSCTUNE         equ	144	;# 
   109     0091                     SSPCON2         equ	145	;# 
   110     0092                     PR2             equ	146	;# 
   111     0093                     SSPADD          equ	147	;# 
   112     0093                     SSPMSK          equ	147	;# 
   113     0093                     MSK             equ	147	;# 
   114     0094                     SSPSTAT         equ	148	;# 
   115     0095                     WPUB            equ	149	;# 
   116     0096                     IOCB            equ	150	;# 
   117     0097                     VRCON           equ	151	;# 
   118     0098                     TXSTA           equ	152	;# 
   119     0099                     SPBRG           equ	153	;# 
   120     009A                     SPBRGH          equ	154	;# 
   121     009B                     PWM1CON         equ	155	;# 
   122     009C                     ECCPAS          equ	156	;# 
   123     009D                     PSTRCON         equ	157	;# 
   124     009E                     ADRESL          equ	158	;# 
   125     009F                     ADCON1          equ	159	;# 
   126     0105                     WDTCON          equ	261	;# 
   127     0107                     CM1CON0         equ	263	;# 
   128     0108                     CM2CON0         equ	264	;# 
   129     0109                     CM2CON1         equ	265	;# 
   130     010C                     EEDATA          equ	268	;# 
   131     010C                     EEDAT           equ	268	;# 
   132     010D                     EEADR           equ	269	;# 
   133     010E                     EEDATH          equ	270	;# 
   134     010F                     EEADRH          equ	271	;# 
   135     0185                     SRCON           equ	389	;# 
   136     0187                     BAUDCTL         equ	391	;# 
   137     0188                     ANSEL           equ	392	;# 
   138     0189                     ANSELH          equ	393	;# 
   139     018C                     EECON1          equ	396	;# 
   140     018D                     EECON2          equ	397	;# 
   141     0000                     INDF            equ	0	;# 
   142     0001                     TMR0            equ	1	;# 
   143     0002                     PCL             equ	2	;# 
   144     0003                     STATUS          equ	3	;# 
   145     0004                     FSR             equ	4	;# 
   146     0005                     PORTA           equ	5	;# 
   147     0006                     PORTB           equ	6	;# 
   148     0007                     PORTC           equ	7	;# 
   149     0008                     PORTD           equ	8	;# 
   150     0009                     PORTE           equ	9	;# 
   151     000A                     PCLATH          equ	10	;# 
   152     000B                     INTCON          equ	11	;# 
   153     000C                     PIR1            equ	12	;# 
   154     000D                     PIR2            equ	13	;# 
   155     000E                     TMR1            equ	14	;# 
   156     000E                     TMR1L           equ	14	;# 
   157     000F                     TMR1H           equ	15	;# 
   158     0010                     T1CON           equ	16	;# 
   159     0011                     TMR2            equ	17	;# 
   160     0012                     T2CON           equ	18	;# 
   161     0013                     SSPBUF          equ	19	;# 
   162     0014                     SSPCON          equ	20	;# 
   163     0015                     CCPR1           equ	21	;# 
   164     0015                     CCPR1L          equ	21	;# 
   165     0016                     CCPR1H          equ	22	;# 
   166     0017                     CCP1CON         equ	23	;# 
   167     0018                     RCSTA           equ	24	;# 
   168     0019                     TXREG           equ	25	;# 
   169     001A                     RCREG           equ	26	;# 
   170     001B                     CCPR2           equ	27	;# 
   171     001B                     CCPR2L          equ	27	;# 
   172     001C                     CCPR2H          equ	28	;# 
   173     001D                     CCP2CON         equ	29	;# 
   174     001E                     ADRESH          equ	30	;# 
   175     001F                     ADCON0          equ	31	;# 
   176     0081                     OPTION_REG      equ	129	;# 
   177     0085                     TRISA           equ	133	;# 
   178     0086                     TRISB           equ	134	;# 
   179     0087                     TRISC           equ	135	;# 
   180     0088                     TRISD           equ	136	;# 
   181     0089                     TRISE           equ	137	;# 
   182     008C                     PIE1            equ	140	;# 
   183     008D                     PIE2            equ	141	;# 
   184     008E                     PCON            equ	142	;# 
   185     008F                     OSCCON          equ	143	;# 
   186     0090                     OSCTUNE         equ	144	;# 
   187     0091                     SSPCON2         equ	145	;# 
   188     0092                     PR2             equ	146	;# 
   189     0093                     SSPADD          equ	147	;# 
   190     0093                     SSPMSK          equ	147	;# 
   191     0093                     MSK             equ	147	;# 
   192     0094                     SSPSTAT         equ	148	;# 
   193     0095                     WPUB            equ	149	;# 
   194     0096                     IOCB            equ	150	;# 
   195     0097                     VRCON           equ	151	;# 
   196     0098                     TXSTA           equ	152	;# 
   197     0099                     SPBRG           equ	153	;# 
   198     009A                     SPBRGH          equ	154	;# 
   199     009B                     PWM1CON         equ	155	;# 
   200     009C                     ECCPAS          equ	156	;# 
   201     009D                     PSTRCON         equ	157	;# 
   202     009E                     ADRESL          equ	158	;# 
   203     009F                     ADCON1          equ	159	;# 
   204     0105                     WDTCON          equ	261	;# 
   205     0107                     CM1CON0         equ	263	;# 
   206     0108                     CM2CON0         equ	264	;# 
   207     0109                     CM2CON1         equ	265	;# 
   208     010C                     EEDATA          equ	268	;# 
   209     010C                     EEDAT           equ	268	;# 
   210     010D                     EEADR           equ	269	;# 
   211     010E                     EEDATH          equ	270	;# 
   212     010F                     EEADRH          equ	271	;# 
   213     0185                     SRCON           equ	389	;# 
   214     0187                     BAUDCTL         equ	391	;# 
   215     0188                     ANSEL           equ	392	;# 
   216     0189                     ANSELH          equ	393	;# 
   217     018C                     EECON1          equ	396	;# 
   218     018D                     EECON2          equ	397	;# 
   219     0006                     _PORTBbits      set	6
   220     0008                     _PORTD          set	8
   221     0009                     _PORTEbits      set	9
   222     0001                     _TMR0           set	1
   223     000B                     _INTCONbits     set	11
   224     0081                     _OPTION_REGbits set	129
   225     0088                     _TRISD          set	136
   226     0089                     _TRISEbits      set	137
   227     008F                     _OSCCONbits     set	143
   228     0189                     _ANSELH         set	393
   229     0188                     _ANSEL          set	392
   230                           
   231                           	psect	cinit
   232     000F                     start_initialization:	
   233                           ; #config settings
   234                           
   235     000F                     __initialization:
   236                           
   237                           ; Clear objects allocated to BITCOMMON
   238     000F  01FB               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   239                           
   240                           ; Clear objects allocated to COMMON
   241     0010  01F0               	clrf	__pbssCOMMON& (0+127)
   242     0011  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   243     0012  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   244     0013  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   245     0014  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   246     0015  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
   247     0016  01F6               	clrf	(__pbssCOMMON+6)& (0+127)
   248     0017  01F7               	clrf	(__pbssCOMMON+7)& (0+127)
   249                           
   250                           ; Clear objects allocated to BANK0
   251     0018  1283               	bcf	3,5	;RP0=0, select bank0
   252     0019  1303               	bcf	3,6	;RP1=0, select bank0
   253     001A  01A0               	clrf	__pbssBANK0& (0+127)
   254     001B  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   255     001C                     end_of_initialization:	
   256                           ;End of C runtime variable initialization code
   257                           
   258     001C                     __end_of__initialization:
   259     001C  0183               	clrf	3
   260     001D  120A  118A  28CF   	ljmp	_main	;jump to C main() function
   261                           
   262                           	psect	bitbssCOMMON
   263     03D8                     __pbitbssCOMMON:
   264     03D8                     _tickms:
   265     03D8                     	ds	1
   266                           
   267                           	psect	bssCOMMON
   268     0070                     __pbssCOMMON:
   269     0070                     taskAPP@tcnt:
   270     0070                     	ds	2
   271     0072                     taskLED@tcnt:
   272     0072                     	ds	2
   273     0074                     taskSW1@tcnt:
   274     0074                     	ds	1
   275     0075                     taskERR@state:
   276     0075                     	ds	1
   277     0076                     taskAPP@state:
   278     0076                     	ds	1
   279     0077                     _sw1sta:
   280     0077                     	ds	1
   281                           
   282                           	psect	bssBANK0
   283     0020                     __pbssBANK0:
   284     0020                     taskERR@tcnt:
   285     0020                     	ds	2
   286                           
   287                           	psect	cstackCOMMON
   288     0078                     __pcstackCOMMON:
   289     0078                     ?_setupMCU:
   290     0078                     ?_taskLED:	
   291                           ; 1 bytes @ 0x0
   292                           
   293     0078                     ?_taskSW1:	
   294                           ; 1 bytes @ 0x0
   295                           
   296     0078                     ?_taskAPP:	
   297                           ; 1 bytes @ 0x0
   298                           
   299     0078                     ?_taskERR:	
   300                           ; 1 bytes @ 0x0
   301                           
   302     0078                     ?_isr:	
   303                           ; 1 bytes @ 0x0
   304                           
   305     0078                     ?_main:	
   306                           ; 1 bytes @ 0x0
   307                           
   308     0078                     ??_isr:	
   309                           ; 1 bytes @ 0x0
   310                           
   311                           
   312                           ; 1 bytes @ 0x0
   313     0078                     	ds	2
   314     007A                     ??_setupMCU:
   315     007A                     ??_taskSW1:	
   316                           ; 1 bytes @ 0x2
   317                           
   318     007A                     ??_taskAPP:	
   319                           ; 1 bytes @ 0x2
   320                           
   321     007A                     ??_taskERR:	
   322                           ; 1 bytes @ 0x2
   323                           
   324                           
   325                           ; 1 bytes @ 0x2
   326     007A                     	ds	1
   327     007B                     ??_main:
   328                           
   329                           	psect	cstackBANK0
   330     0022                     __pcstackBANK0:	
   331                           ; 1 bytes @ 0x3
   332                           
   333     0022                     ??_taskLED:
   334                           
   335                           ; 1 bytes @ 0x0
   336     0022                     	ds	2
   337                           
   338                           	psect	maintext
   339     00CF                     __pmaintext:	
   340 ;;
   341 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   342 ;;
   343 ;; *************** function _main *****************
   344 ;; Defined at:
   345 ;;		line 28 in file "../p1apbase.X/main.c"
   346 ;; Parameters:    Size  Location     Type
   347 ;;		None
   348 ;; Auto vars:     Size  Location     Type
   349 ;;		None
   350 ;; Return value:  Size  Location     Type
   351 ;;                  1    wreg      void 
   352 ;; Registers used:
   353 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   354 ;; Tracked objects:
   355 ;;		On entry : B00/0
   356 ;;		On exit  : 0/0
   357 ;;		Unchanged: 0/0
   358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   359 ;;      Params:         0       0       0       0       0
   360 ;;      Locals:         0       0       0       0       0
   361 ;;      Temps:          0       0       0       0       0
   362 ;;      Totals:         0       0       0       0       0
   363 ;;Total ram usage:        0 bytes
   364 ;; Hardware stack levels required when called: 2
   365 ;; This function calls:
   366 ;;		_setupMCU
   367 ;;		_taskAPP
   368 ;;		_taskERR
   369 ;;		_taskLED
   370 ;;		_taskSW1
   371 ;; This function is called by:
   372 ;;		Startup code after reset
   373 ;; This function uses a non-reentrant model
   374 ;;
   375                           
   376     00CF                     _main:	
   377                           ;psect for function _main
   378                           
   379     00CF                     l802:	
   380                           ;incstack = 0
   381                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   382                           
   383                           
   384                           ;../p1apbase.X/main.c: 30:     setupMCU();
   385     00CF  120A  118A  20A5  120A  118A  	fcall	_setupMCU
   386     00D4                     l804:
   387                           
   388                           ;../p1apbase.X/main.c: 32:     {;../p1apbase.X/main.c: 33:         if(tickms)
   389     00D4  1C7B               	btfss	_tickms/(0+8),_tickms& (0+7)	;volatile
   390     00D5  28D7               	goto	u211
   391     00D6  28D8               	goto	u210
   392     00D7                     u211:
   393     00D7  28D4               	goto	l804
   394     00D8                     u210:
   395     00D8                     l806:
   396                           
   397                           ;../p1apbase.X/main.c: 34:         {;../p1apbase.X/main.c: 35:             tickms = 0;
   398     00D8  107B               	bcf	_tickms/(0+8),_tickms& (0+7)	;volatile
   399     00D9                     l808:
   400                           
   401                           ;../p1apbase.X/main.c: 36:             taskLED();
   402     00D9  120A  118A  20F7  120A  118A  	fcall	_taskLED
   403                           
   404                           ;../p1apbase.X/main.c: 37:             taskSW1();
   405     00DE  120A  118A  2115  120A  118A  	fcall	_taskSW1
   406     00E3                     l810:
   407                           
   408                           ;../p1apbase.X/main.c: 38:             if(sw1sta) taskAPP();
   409     00E3  0877               	movf	_sw1sta,w
   410     00E4  1903               	btfsc	3,2
   411     00E5  28E7               	goto	u221
   412     00E6  28E8               	goto	u220
   413     00E7                     u221:
   414     00E7  28EE               	goto	l814
   415     00E8                     u220:
   416     00E8                     l812:
   417     00E8  120A  118A  2020  120A  118A  	fcall	_taskAPP
   418     00ED  28D4               	goto	l804
   419     00EE                     l814:
   420     00EE  120A  118A  2075  120A  118A  	fcall	_taskERR
   421     00F3  28D4               	goto	l804
   422     00F4  120A  118A  280C   	ljmp	start
   423     00F7                     __end_of_main:
   424                           
   425                           	psect	text1
   426     0115                     __ptext1:	
   427 ;; *************** function _taskSW1 *****************
   428 ;; Defined at:
   429 ;;		line 134 in file "../p1apbase.X/main.c"
   430 ;; Parameters:    Size  Location     Type
   431 ;;		None
   432 ;; Auto vars:     Size  Location     Type
   433 ;;		None
   434 ;; Return value:  Size  Location     Type
   435 ;;                  1    wreg      void 
   436 ;; Registers used:
   437 ;;		wreg, status,2, status,0
   438 ;; Tracked objects:
   439 ;;		On entry : 0/0
   440 ;;		On exit  : 0/0
   441 ;;		Unchanged: 0/0
   442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   443 ;;      Params:         0       0       0       0       0
   444 ;;      Locals:         0       0       0       0       0
   445 ;;      Temps:          1       0       0       0       0
   446 ;;      Totals:         1       0       0       0       0
   447 ;;Total ram usage:        1 bytes
   448 ;; Hardware stack levels used: 1
   449 ;; Hardware stack levels required when called: 1
   450 ;; This function calls:
   451 ;;		Nothing
   452 ;; This function is called by:
   453 ;;		_main
   454 ;; This function uses a non-reentrant model
   455 ;;
   456                           
   457     0115                     _taskSW1:	
   458                           ;psect for function _taskSW1
   459                           
   460     0115                     l684:	
   461                           ;incstack = 0
   462                           ; Regs used in _taskSW1: [wreg+status,2+status,0]
   463                           
   464                           
   465                           ;../p1apbase.X/main.c: 136:     static uint8_t tcnt = 0;;../p1apbase.X/main.c: 137:     
      +                          if(sw1sta != PORTBbits.RB0)
   466     0115  1283               	bcf	3,5	;RP0=0, select bank0
   467     0116  1303               	bcf	3,6	;RP1=0, select bank0
   468     0117  0806               	movf	6,w	;volatile
   469     0118  3901               	andlw	1
   470     0119  0677               	xorwf	_sw1sta,w
   471     011A  1903               	skipnz
   472     011B  291D               	goto	u41
   473     011C  291E               	goto	u40
   474     011D                     u41:
   475     011D  292D               	goto	l690
   476     011E                     u40:
   477     011E                     l686:
   478                           
   479                           ;../p1apbase.X/main.c: 138:     {;../p1apbase.X/main.c: 139:         if(tcnt++ > 199) sw
      +                          1sta = PORTBbits.RB0;
   480     011E  3001               	movlw	1
   481     011F  07F4               	addwf	taskSW1@tcnt,f
   482     0120  30FF               	movlw	-1
   483     0121  0774               	addwf	taskSW1@tcnt,w
   484     0122  00FA               	movwf	??_taskSW1
   485     0123  30C8               	movlw	200
   486     0124  027A               	subwf	??_taskSW1,w
   487     0125  1C03               	skipc
   488     0126  2928               	goto	u51
   489     0127  2929               	goto	u50
   490     0128                     u51:
   491     0128  292E               	goto	l104
   492     0129                     u50:
   493     0129                     l688:
   494     0129  0806               	movf	6,w	;volatile
   495     012A  3901               	andlw	1
   496     012B  00F7               	movwf	_sw1sta
   497     012C  292E               	goto	l104
   498     012D                     l690:
   499     012D  01F4               	clrf	taskSW1@tcnt
   500     012E                     l104:
   501     012E  0008               	return
   502     012F                     __end_of_taskSW1:
   503                           
   504                           	psect	text2
   505     00F7                     __ptext2:	
   506 ;; *************** function _taskLED *****************
   507 ;; Defined at:
   508 ;;		line 64 in file "../p1apbase.X/main.c"
   509 ;; Parameters:    Size  Location     Type
   510 ;;		None
   511 ;; Auto vars:     Size  Location     Type
   512 ;;		None
   513 ;; Return value:  Size  Location     Type
   514 ;;                  1    wreg      void 
   515 ;; Registers used:
   516 ;;		wreg, status,2, status,0
   517 ;; Tracked objects:
   518 ;;		On entry : 0/0
   519 ;;		On exit  : 0/0
   520 ;;		Unchanged: 0/0
   521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   522 ;;      Params:         0       0       0       0       0
   523 ;;      Locals:         0       0       0       0       0
   524 ;;      Temps:          0       2       0       0       0
   525 ;;      Totals:         0       2       0       0       0
   526 ;;Total ram usage:        2 bytes
   527 ;; Hardware stack levels used: 1
   528 ;; Hardware stack levels required when called: 1
   529 ;; This function calls:
   530 ;;		Nothing
   531 ;; This function is called by:
   532 ;;		_main
   533 ;; This function uses a non-reentrant model
   534 ;;
   535                           
   536     00F7                     _taskLED:	
   537                           ;psect for function _taskLED
   538                           
   539     00F7                     l792:	
   540                           ;incstack = 0
   541                           ; Regs used in _taskLED: [wreg+status,2+status,0]
   542                           
   543                           
   544                           ;../p1apbase.X/main.c: 66:     static uint16_t tcnt = 0;;../p1apbase.X/main.c: 67:     i
      +                          f(tcnt++ > 999)
   545     00F7  0873               	movf	taskLED@tcnt+1,w
   546     00F8  1283               	bcf	3,5	;RP0=0, select bank0
   547     00F9  1303               	bcf	3,6	;RP1=0, select bank0
   548     00FA  00A3               	movwf	??_taskLED+1
   549     00FB  0872               	movf	taskLED@tcnt,w
   550     00FC  00A2               	movwf	??_taskLED
   551     00FD  0AF2               	incf	taskLED@tcnt,f
   552     00FE  1903               	skipnz
   553     00FF  0AF3               	incf	taskLED@tcnt+1,f
   554     0100  3003               	movlw	3
   555     0101  0223               	subwf	??_taskLED+1,w
   556     0102  30E8               	movlw	232
   557     0103  1903               	skipnz
   558     0104  0222               	subwf	??_taskLED,w
   559     0105  1C03               	skipc
   560     0106  2908               	goto	u191
   561     0107  2909               	goto	u190
   562     0108                     u191:
   563     0108  290C               	goto	l798
   564     0109                     u190:
   565     0109                     l794:
   566                           
   567                           ;../p1apbase.X/main.c: 68:     {;../p1apbase.X/main.c: 69:         tcnt = 0;
   568     0109  01F2               	clrf	taskLED@tcnt
   569     010A  01F3               	clrf	taskLED@tcnt+1
   570     010B                     l796:
   571                           
   572                           ;../p1apbase.X/main.c: 70:         PORTEbits.RE2 = 1;
   573     010B  1509               	bsf	9,2	;volatile
   574     010C                     l798:
   575                           
   576                           ;../p1apbase.X/main.c: 72:     if(tcnt == 200) PORTEbits.RE2 = 0;
   577     010C  30C8               	movlw	200
   578     010D  0672               	xorwf	taskLED@tcnt,w
   579     010E  0473               	iorwf	taskLED@tcnt+1,w
   580     010F  1D03               	btfss	3,2
   581     0110  2912               	goto	u201
   582     0111  2913               	goto	u200
   583     0112                     u201:
   584     0112  2914               	goto	l66
   585     0113                     u200:
   586     0113                     l800:
   587     0113  1109               	bcf	9,2	;volatile
   588     0114                     l66:
   589     0114  0008               	return
   590     0115                     __end_of_taskLED:
   591                           
   592                           	psect	text3
   593     0075                     __ptext3:	
   594 ;; *************** function _taskERR *****************
   595 ;; Defined at:
   596 ;;		line 111 in file "../p1apbase.X/main.c"
   597 ;; Parameters:    Size  Location     Type
   598 ;;		None
   599 ;; Auto vars:     Size  Location     Type
   600 ;;		None
   601 ;; Return value:  Size  Location     Type
   602 ;;                  1    wreg      void 
   603 ;; Registers used:
   604 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   605 ;; Tracked objects:
   606 ;;		On entry : 0/0
   607 ;;		On exit  : 0/0
   608 ;;		Unchanged: 0/0
   609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   610 ;;      Params:         0       0       0       0       0
   611 ;;      Locals:         0       0       0       0       0
   612 ;;      Temps:          0       0       0       0       0
   613 ;;      Totals:         0       0       0       0       0
   614 ;;Total ram usage:        0 bytes
   615 ;; Hardware stack levels used: 1
   616 ;; Hardware stack levels required when called: 1
   617 ;; This function calls:
   618 ;;		Nothing
   619 ;; This function is called by:
   620 ;;		_main
   621 ;; This function uses a non-reentrant model
   622 ;;
   623                           
   624     0075                     _taskERR:	
   625                           ;psect for function _taskERR
   626                           
   627     0075                     l760:	
   628                           ;incstack = 0
   629                           ; Regs used in _taskERR: [wreg-fsr0h+status,2+status,0]
   630                           
   631                           
   632                           ;../p1apbase.X/main.c: 113:     static uint16_t tcnt = 0;;../p1apbase.X/main.c: 114:    
      +                           static uint8_t state = 0;;../p1apbase.X/main.c: 115:     tcnt++;
   633     0075  3001               	movlw	1
   634     0076  1283               	bcf	3,5	;RP0=0, select bank0
   635     0077  1303               	bcf	3,6	;RP1=0, select bank0
   636     0078  07A0               	addwf	taskERR@tcnt,f
   637     0079  1803               	skipnc
   638     007A  0AA1               	incf	taskERR@tcnt+1,f
   639     007B  3000               	movlw	0
   640     007C  07A1               	addwf	taskERR@tcnt+1,f
   641                           
   642                           ;../p1apbase.X/main.c: 116:     switch(state)
   643     007D  289C               	goto	l776
   644     007E                     l762:
   645                           
   646                           ;../p1apbase.X/main.c: 119:             PORTD = 0b000000;
   647     007E  0188               	clrf	8	;volatile
   648     007F                     l764:
   649                           
   650                           ;../p1apbase.X/main.c: 120:             if(tcnt > 499)
   651     007F  3001               	movlw	1
   652     0080  0221               	subwf	taskERR@tcnt+1,w
   653     0081  30F4               	movlw	244
   654     0082  1903               	skipnz
   655     0083  0220               	subwf	taskERR@tcnt,w
   656     0084  1C03               	skipc
   657     0085  2887               	goto	u151
   658     0086  2888               	goto	u150
   659     0087                     u151:
   660     0087  28A4               	goto	l96
   661     0088                     u150:
   662     0088                     l766:
   663                           
   664                           ;../p1apbase.X/main.c: 121:             {;../p1apbase.X/main.c: 122:                 tcn
      +                          t = 0;
   665     0088  01A0               	clrf	taskERR@tcnt
   666     0089  01A1               	clrf	taskERR@tcnt+1
   667     008A                     l768:
   668                           
   669                           ;../p1apbase.X/main.c: 123:                 state++;
   670     008A  3001               	movlw	1
   671     008B  07F5               	addwf	taskERR@state,f
   672     008C  28A4               	goto	l96
   673     008D                     l94:	
   674                           ;../p1apbase.X/main.c: 125:         case 1:
   675                           
   676                           
   677                           ;../p1apbase.X/main.c: 126:             PORTD = 0b010010;
   678     008D  3012               	movlw	18
   679     008E  0088               	movwf	8	;volatile
   680     008F                     l770:
   681                           
   682                           ;../p1apbase.X/main.c: 127:             if(tcnt > 499)
   683     008F  3001               	movlw	1
   684     0090  0221               	subwf	taskERR@tcnt+1,w
   685     0091  30F4               	movlw	244
   686     0092  1903               	skipnz
   687     0093  0220               	subwf	taskERR@tcnt,w
   688     0094  1C03               	skipc
   689     0095  2897               	goto	u161
   690     0096  2898               	goto	u160
   691     0097                     u161:
   692     0097  28A4               	goto	l96
   693     0098                     u160:
   694     0098                     l772:
   695                           
   696                           ;../p1apbase.X/main.c: 128:             {;../p1apbase.X/main.c: 129:                 tcn
      +                          t = 0;
   697     0098  01A0               	clrf	taskERR@tcnt
   698     0099  01A1               	clrf	taskERR@tcnt+1
   699                           
   700                           ;../p1apbase.X/main.c: 130:                 state = 0;
   701     009A  01F5               	clrf	taskERR@state
   702     009B  28A4               	goto	l96
   703     009C                     l776:
   704     009C  0875               	movf	taskERR@state,w
   705                           
   706                           ; Switch size 1, requested type "simple"
   707                           ; Number of cases is 2, Range of values is 0 to 1
   708                           ; switch strategies available:
   709                           ; Name         Instructions Cycles
   710                           ; simple_byte            7     4 (average)
   711                           ; direct_byte           14     8 (fixed)
   712                           ; jumptable            260     6 (fixed)
   713                           ;	Chosen strategy is simple_byte
   714     009D  3A00               	xorlw	0	; case 0
   715     009E  1903               	skipnz
   716     009F  287E               	goto	l762
   717     00A0  3A01               	xorlw	1	; case 1
   718     00A1  1903               	skipnz
   719     00A2  288D               	goto	l94
   720     00A3  28A4               	goto	l96
   721     00A4                     l96:
   722     00A4  0008               	return
   723     00A5                     __end_of_taskERR:
   724                           
   725                           	psect	text4
   726     0020                     __ptext4:	
   727 ;; *************** function _taskAPP *****************
   728 ;; Defined at:
   729 ;;		line 74 in file "../p1apbase.X/main.c"
   730 ;; Parameters:    Size  Location     Type
   731 ;;		None
   732 ;; Auto vars:     Size  Location     Type
   733 ;;		None
   734 ;; Return value:  Size  Location     Type
   735 ;;                  1    wreg      void 
   736 ;; Registers used:
   737 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   738 ;; Tracked objects:
   739 ;;		On entry : 0/0
   740 ;;		On exit  : 0/0
   741 ;;		Unchanged: 0/0
   742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   743 ;;      Params:         0       0       0       0       0
   744 ;;      Locals:         0       0       0       0       0
   745 ;;      Temps:          0       0       0       0       0
   746 ;;      Totals:         0       0       0       0       0
   747 ;;Total ram usage:        0 bytes
   748 ;; Hardware stack levels used: 1
   749 ;; Hardware stack levels required when called: 1
   750 ;; This function calls:
   751 ;;		Nothing
   752 ;; This function is called by:
   753 ;;		_main
   754 ;; This function uses a non-reentrant model
   755 ;;
   756                           
   757     0020                     _taskAPP:	
   758                           ;psect for function _taskAPP
   759                           
   760     0020                     l692:	
   761                           ;incstack = 0
   762                           ; Regs used in _taskAPP: [wreg-fsr0h+status,2+status,0]
   763                           
   764                           
   765                           ;../p1apbase.X/main.c: 76:     static uint16_t tcnt = 0;;../p1apbase.X/main.c: 77:     s
      +                          tatic uint8_t state = 0;;../p1apbase.X/main.c: 78:     tcnt++;
   766     0020  3001               	movlw	1
   767     0021  07F0               	addwf	taskAPP@tcnt,f
   768     0022  1803               	skipnc
   769     0023  0AF1               	incf	taskAPP@tcnt+1,f
   770     0024  3000               	movlw	0
   771     0025  07F1               	addwf	taskAPP@tcnt+1,f
   772                           
   773                           ;../p1apbase.X/main.c: 79:     switch(state)
   774     0026  2866               	goto	l718
   775     0027                     l74:	
   776                           ;../p1apbase.X/main.c: 80:     {;../p1apbase.X/main.c: 81:         case 0:
   777                           
   778                           
   779                           ;../p1apbase.X/main.c: 82:             PORTD = 0b100001;
   780     0027  3021               	movlw	33
   781     0028  1283               	bcf	3,5	;RP0=0, select bank0
   782     0029  1303               	bcf	3,6	;RP1=0, select bank0
   783     002A  0088               	movwf	8	;volatile
   784     002B                     l694:
   785                           
   786                           ;../p1apbase.X/main.c: 83:             if(tcnt > 9999)
   787     002B  3027               	movlw	39
   788     002C  0271               	subwf	taskAPP@tcnt+1,w
   789     002D  3010               	movlw	16
   790     002E  1903               	skipnz
   791     002F  0270               	subwf	taskAPP@tcnt,w
   792     0030  1C03               	skipc
   793     0031  2833               	goto	u61
   794     0032  2834               	goto	u60
   795     0033                     u61:
   796     0033  2874               	goto	l83
   797     0034                     u60:
   798     0034                     l696:
   799                           
   800                           ;../p1apbase.X/main.c: 84:             {;../p1apbase.X/main.c: 85:                 tcnt 
      +                          = 0;
   801     0034  01F0               	clrf	taskAPP@tcnt
   802     0035  01F1               	clrf	taskAPP@tcnt+1
   803     0036                     l698:
   804                           
   805                           ;../p1apbase.X/main.c: 86:                 state++;
   806     0036  3001               	movlw	1
   807     0037  07F6               	addwf	taskAPP@state,f
   808     0038  2874               	goto	l83
   809     0039                     l77:	
   810                           ;../p1apbase.X/main.c: 88:         case 1:
   811                           
   812                           
   813                           ;../p1apbase.X/main.c: 89:             PORTD = 0b100010;
   814     0039  3022               	movlw	34
   815     003A  1283               	bcf	3,5	;RP0=0, select bank0
   816     003B  1303               	bcf	3,6	;RP1=0, select bank0
   817     003C  0088               	movwf	8	;volatile
   818     003D                     l700:
   819                           
   820                           ;../p1apbase.X/main.c: 90:             if(tcnt > 2999)
   821     003D  300B               	movlw	11
   822     003E  0271               	subwf	taskAPP@tcnt+1,w
   823     003F  30B8               	movlw	184
   824     0040  1903               	skipnz
   825     0041  0270               	subwf	taskAPP@tcnt,w
   826     0042  1C03               	skipc
   827     0043  2845               	goto	u71
   828     0044  2846               	goto	u70
   829     0045                     u71:
   830     0045  2874               	goto	l83
   831     0046                     u70:
   832     0046  2834               	goto	l696
   833     0047                     l79:	
   834                           ;../p1apbase.X/main.c: 95:         case 2:
   835                           
   836                           
   837                           ;../p1apbase.X/main.c: 96:             PORTD = 0b001100;
   838     0047  300C               	movlw	12
   839     0048  1283               	bcf	3,5	;RP0=0, select bank0
   840     0049  1303               	bcf	3,6	;RP1=0, select bank0
   841     004A  0088               	movwf	8	;volatile
   842     004B                     l706:
   843                           
   844                           ;../p1apbase.X/main.c: 97:             if(tcnt > 9999)
   845     004B  3027               	movlw	39
   846     004C  0271               	subwf	taskAPP@tcnt+1,w
   847     004D  3010               	movlw	16
   848     004E  1903               	skipnz
   849     004F  0270               	subwf	taskAPP@tcnt,w
   850     0050  1C03               	skipc
   851     0051  2853               	goto	u81
   852     0052  2854               	goto	u80
   853     0053                     u81:
   854     0053  2874               	goto	l83
   855     0054                     u80:
   856     0054  2834               	goto	l696
   857     0055                     l81:	
   858                           ;../p1apbase.X/main.c: 102:         case 3:
   859                           
   860                           
   861                           ;../p1apbase.X/main.c: 103:             PORTD = 0b010100;
   862     0055  3014               	movlw	20
   863     0056  1283               	bcf	3,5	;RP0=0, select bank0
   864     0057  1303               	bcf	3,6	;RP1=0, select bank0
   865     0058  0088               	movwf	8	;volatile
   866     0059                     l712:
   867                           
   868                           ;../p1apbase.X/main.c: 104:             if(tcnt > 2999)
   869     0059  300B               	movlw	11
   870     005A  0271               	subwf	taskAPP@tcnt+1,w
   871     005B  30B8               	movlw	184
   872     005C  1903               	skipnz
   873     005D  0270               	subwf	taskAPP@tcnt,w
   874     005E  1C03               	skipc
   875     005F  2861               	goto	u91
   876     0060  2862               	goto	u90
   877     0061                     u91:
   878     0061  2874               	goto	l83
   879     0062                     u90:
   880     0062                     l714:
   881                           
   882                           ;../p1apbase.X/main.c: 105:             {;../p1apbase.X/main.c: 106:                 tcn
      +                          t = 0;
   883     0062  01F0               	clrf	taskAPP@tcnt
   884     0063  01F1               	clrf	taskAPP@tcnt+1
   885                           
   886                           ;../p1apbase.X/main.c: 107:                 state = 0;
   887     0064  01F6               	clrf	taskAPP@state
   888     0065  2874               	goto	l83
   889     0066                     l718:
   890     0066  0876               	movf	taskAPP@state,w
   891                           
   892                           ; Switch size 1, requested type "simple"
   893                           ; Number of cases is 4, Range of values is 0 to 3
   894                           ; switch strategies available:
   895                           ; Name         Instructions Cycles
   896                           ; simple_byte           13     7 (average)
   897                           ; direct_byte           20     8 (fixed)
   898                           ; jumptable            260     6 (fixed)
   899                           ;	Chosen strategy is simple_byte
   900     0067  3A00               	xorlw	0	; case 0
   901     0068  1903               	skipnz
   902     0069  2827               	goto	l74
   903     006A  3A01               	xorlw	1	; case 1
   904     006B  1903               	skipnz
   905     006C  2839               	goto	l77
   906     006D  3A03               	xorlw	3	; case 2
   907     006E  1903               	skipnz
   908     006F  2847               	goto	l79
   909     0070  3A01               	xorlw	1	; case 3
   910     0071  1903               	skipnz
   911     0072  2855               	goto	l81
   912     0073  2874               	goto	l83
   913     0074                     l83:
   914     0074  0008               	return
   915     0075                     __end_of_taskAPP:
   916                           
   917                           	psect	text5
   918     00A5                     __ptext5:	
   919 ;; *************** function _setupMCU *****************
   920 ;; Defined at:
   921 ;;		line 43 in file "../p1apbase.X/main.c"
   922 ;; Parameters:    Size  Location     Type
   923 ;;		None
   924 ;; Auto vars:     Size  Location     Type
   925 ;;		None
   926 ;; Return value:  Size  Location     Type
   927 ;;                  1    wreg      void 
   928 ;; Registers used:
   929 ;;		wreg, status,2, status,0
   930 ;; Tracked objects:
   931 ;;		On entry : 0/0
   932 ;;		On exit  : 0/0
   933 ;;		Unchanged: 0/0
   934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   935 ;;      Params:         0       0       0       0       0
   936 ;;      Locals:         0       0       0       0       0
   937 ;;      Temps:          0       0       0       0       0
   938 ;;      Totals:         0       0       0       0       0
   939 ;;Total ram usage:        0 bytes
   940 ;; Hardware stack levels used: 1
   941 ;; Hardware stack levels required when called: 1
   942 ;; This function calls:
   943 ;;		Nothing
   944 ;; This function is called by:
   945 ;;		_main
   946 ;; This function uses a non-reentrant model
   947 ;;
   948                           
   949     00A5                     _setupMCU:	
   950                           ;psect for function _setupMCU
   951                           
   952     00A5                     l648:	
   953                           ;incstack = 0
   954                           ; Regs used in _setupMCU: [wreg+status,2+status,0]
   955                           
   956                           
   957                           ;../p1apbase.X/main.c: 45:     OSCCONbits.IRCF = 0b111;
   958     00A5  3070               	movlw	112
   959     00A6  1683               	bsf	3,5	;RP0=1, select bank1
   960     00A7  1303               	bcf	3,6	;RP1=0, select bank1
   961     00A8  048F               	iorwf	15,f	;volatile
   962     00A9                     l56:	
   963                           ;../p1apbase.X/main.c: 46:     while(OSCCONbits.HTS == 0);
   964                           
   965     00A9  1D0F               	btfss	15,2	;volatile
   966     00AA  28AC               	goto	u11
   967     00AB  28AD               	goto	u10
   968     00AC                     u11:
   969     00AC  28A9               	goto	l56
   970     00AD                     u10:
   971     00AD                     l650:
   972                           
   973                           ;../p1apbase.X/main.c: 47:     ANSEL = 0;
   974     00AD  1683               	bsf	3,5	;RP0=1, select bank3
   975     00AE  1703               	bsf	3,6	;RP1=1, select bank3
   976     00AF  0188               	clrf	8	;volatile
   977                           
   978                           ;../p1apbase.X/main.c: 48:     ANSELH = 0;
   979     00B0  0189               	clrf	9	;volatile
   980     00B1                     l652:
   981                           
   982                           ;../p1apbase.X/main.c: 49:     TRISEbits.TRISE2 = 0;
   983     00B1  1683               	bsf	3,5	;RP0=1, select bank1
   984     00B2  1303               	bcf	3,6	;RP1=0, select bank1
   985     00B3  1109               	bcf	9,2	;volatile
   986     00B4                     l654:
   987                           
   988                           ;../p1apbase.X/main.c: 50:     PORTEbits.RE2 = 0;
   989     00B4  1283               	bcf	3,5	;RP0=0, select bank0
   990     00B5  1303               	bcf	3,6	;RP1=0, select bank0
   991     00B6  1109               	bcf	9,2	;volatile
   992                           
   993                           ;../p1apbase.X/main.c: 51:     TRISD = 0x00;
   994     00B7  1683               	bsf	3,5	;RP0=1, select bank1
   995     00B8  1303               	bcf	3,6	;RP1=0, select bank1
   996     00B9  0188               	clrf	8	;volatile
   997     00BA                     l656:
   998                           
   999                           ;../p1apbase.X/main.c: 52:     PORTD = 0b010010;
  1000     00BA  3012               	movlw	18
  1001     00BB  1283               	bcf	3,5	;RP0=0, select bank0
  1002     00BC  1303               	bcf	3,6	;RP1=0, select bank0
  1003     00BD  0088               	movwf	8	;volatile
  1004     00BE                     l658:
  1005                           
  1006                           ;../p1apbase.X/main.c: 53:     OPTION_REGbits.nRBPU = 0;
  1007     00BE  1683               	bsf	3,5	;RP0=1, select bank1
  1008     00BF  1303               	bcf	3,6	;RP1=0, select bank1
  1009     00C0  1381               	bcf	1,7	;volatile
  1010     00C1                     l660:
  1011                           
  1012                           ;../p1apbase.X/main.c: 55:     OPTION_REGbits.T0CS = 0;
  1013     00C1  1281               	bcf	1,5	;volatile
  1014     00C2                     l662:
  1015                           
  1016                           ;../p1apbase.X/main.c: 56:     OPTION_REGbits.PSA = 0;
  1017     00C2  1181               	bcf	1,3	;volatile
  1018     00C3                     l664:
  1019                           
  1020                           ;../p1apbase.X/main.c: 57:     OPTION_REGbits.PS = 0b011;
  1021     00C3  0801               	movf	1,w	;volatile
  1022     00C4  39F8               	andlw	-8
  1023     00C5  3803               	iorlw	3
  1024     00C6  0081               	movwf	1	;volatile
  1025     00C7                     l666:
  1026                           
  1027                           ;../p1apbase.X/main.c: 58:     TMR0 = 131;
  1028     00C7  3083               	movlw	131
  1029     00C8  1283               	bcf	3,5	;RP0=0, select bank0
  1030     00C9  1303               	bcf	3,6	;RP1=0, select bank0
  1031     00CA  0081               	movwf	1	;volatile
  1032     00CB                     l668:
  1033                           
  1034                           ;../p1apbase.X/main.c: 59:     INTCONbits.T0IF = 0;
  1035     00CB  110B               	bcf	11,2	;volatile
  1036     00CC                     l670:
  1037                           
  1038                           ;../p1apbase.X/main.c: 60:     INTCONbits.T0IE = 1;
  1039     00CC  168B               	bsf	11,5	;volatile
  1040     00CD                     l672:
  1041                           
  1042                           ;../p1apbase.X/main.c: 62:     INTCONbits.GIE = 1;
  1043     00CD  178B               	bsf	11,7	;volatile
  1044     00CE                     l59:
  1045     00CE  0008               	return
  1046     00CF                     __end_of_setupMCU:
  1047                           
  1048                           	psect	text6
  1049     012F                     __ptext6:	
  1050 ;; *************** function _isr *****************
  1051 ;; Defined at:
  1052 ;;		line 19 in file "../p1apbase.X/main.c"
  1053 ;; Parameters:    Size  Location     Type
  1054 ;;		None
  1055 ;; Auto vars:     Size  Location     Type
  1056 ;;		None
  1057 ;; Return value:  Size  Location     Type
  1058 ;;                  1    wreg      void 
  1059 ;; Registers used:
  1060 ;;		wreg, status,2, status,0
  1061 ;; Tracked objects:
  1062 ;;		On entry : 0/0
  1063 ;;		On exit  : 0/0
  1064 ;;		Unchanged: 0/0
  1065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1066 ;;      Params:         0       0       0       0       0
  1067 ;;      Locals:         0       0       0       0       0
  1068 ;;      Temps:          2       0       0       0       0
  1069 ;;      Totals:         2       0       0       0       0
  1070 ;;Total ram usage:        2 bytes
  1071 ;; Hardware stack levels used: 1
  1072 ;; This function calls:
  1073 ;;		Nothing
  1074 ;; This function is called by:
  1075 ;;		Interrupt level 1
  1076 ;; This function uses a non-reentrant model
  1077 ;;
  1078                           
  1079     012F                     _isr:	
  1080                           ;psect for function _isr
  1081                           
  1082     012F                     i1l738:
  1083                           
  1084                           ;../p1apbase.X/main.c: 21:     if(INTCONbits.T0IF)
  1085     012F  1D0B               	btfss	11,2	;volatile
  1086     0130  2932               	goto	u12_21
  1087     0131  2933               	goto	u12_20
  1088     0132                     u12_21:
  1089     0132  2939               	goto	i1l42
  1090     0133                     u12_20:
  1091     0133                     i1l740:
  1092                           
  1093                           ;../p1apbase.X/main.c: 22:     {;../p1apbase.X/main.c: 23:         INTCONbits.T0IF = 0;
  1094     0133  110B               	bcf	11,2	;volatile
  1095     0134                     i1l742:
  1096                           
  1097                           ;../p1apbase.X/main.c: 24:         TMR0 += 131;
  1098     0134  3083               	movlw	131
  1099     0135  1283               	bcf	3,5	;RP0=0, select bank0
  1100     0136  1303               	bcf	3,6	;RP1=0, select bank0
  1101     0137  0781               	addwf	1,f	;volatile
  1102     0138                     i1l744:
  1103                           
  1104                           ;../p1apbase.X/main.c: 25:         tickms = 1;
  1105     0138  147B               	bsf	_tickms/(0+8),_tickms& (0+7)	;volatile
  1106     0139                     i1l42:
  1107     0139  0879               	movf	??_isr+1,w
  1108     013A  008A               	movwf	10
  1109     013B  0E78               	swapf	??_isr,w
  1110     013C  0083               	movwf	3
  1111     013D  0EFE               	swapf	btemp,f
  1112     013E  0E7E               	swapf	btemp,w
  1113     013F  0009               	retfie
  1114     0140                     __end_of_isr:
  1115     0002                     ___latbits      equ	2
  1116     007E                     btemp           set	126	;btemp
  1117     007E                     wtemp0          set	126
  1118                           
  1119                           	psect	intentry
  1120     0004                     __pintentry:	
  1121                           ;incstack = 0
  1122                           ; Regs used in _isr: [wreg+status,2+status,0]
  1123                           
  1124     0004                     interrupt_function:
  1125     007E                     saved_w         set	btemp
  1126     0004  00FE               	movwf	btemp
  1127     0005  0E03               	swapf	3,w
  1128     0006  00F8               	movwf	??_isr
  1129     0007  080A               	movf	10,w
  1130     0008  00F9               	movwf	??_isr+1
  1131     0009  120A  118A  292F   	ljmp	_isr
  1132                           
  1133                           	psect	config
  1134                           
  1135                           ;Config register CONFIG1 @ 0x2007
  1136                           ;	Oscillator Selection bits
  1137                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  1138                           ;	Watchdog Timer Enable bit
  1139                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  1140                           ;	Power-up Timer Enable bit
  1141                           ;	PWRTE = 0x1, unprogrammed default
  1142                           ;	RE3/MCLR pin function select bit
  1143                           ;	MCLRE = 0x1, unprogrammed default
  1144                           ;	Code Protection bit
  1145                           ;	CP = 0x1, unprogrammed default
  1146                           ;	Data Code Protection bit
  1147                           ;	CPD = 0x1, unprogrammed default
  1148                           ;	Brown Out Reset Selection bits
  1149                           ;	BOREN = OFF, BOR disabled
  1150                           ;	Internal External Switchover bit
  1151                           ;	IESO = 0x1, unprogrammed default
  1152                           ;	Fail-Safe Clock Monitor Enabled bit
  1153                           ;	FCMEN = 0x1, unprogrammed default
  1154                           ;	Low Voltage Programming Enable bit
  1155                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  1156                           ;	In-Circuit Debugger Mode bit
  1157                           ;	DEBUG = 0x1, unprogrammed default
  1158     2007                     	org	8199
  1159     2007  2CF4               	dw	11508

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         11
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      3      12
    BANK0            80      2       4
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_taskSW1

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_taskLED

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                           _setupMCU
                            _taskAPP
                            _taskERR
                            _taskLED
                            _taskSW1
 ---------------------------------------------------------------------------------
 (1) _taskSW1                                              1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _taskLED                                              2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _taskERR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _taskAPP                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupMCU                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _isr                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setupMCU
   _taskAPP
   _taskERR
   _taskLED
   _taskSW1

 _isr (ROOT)

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       1      7.1%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK3            96      0       0      0.0%
BITBANK2            96      0       0      0.0%
COMMON              14      3      12     85.7%
BANK0               80      2       4      5.0%
BANK1               80      0       0      0.0%
BANK3               96      0       0      0.0%
BANK2               96      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0      15      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Sat Sep  7 00:34:33 2024

                     l56 00A9                       l81 0055                       l74 0027  
                     l66 0114                       l59 00CE                       l83 0074  
                     l77 0039                       l94 008D                       l79 0047  
                     l96 00A4                       u10 00AD                       u11 00AC  
                     u40 011E                       u41 011D                       u50 0129  
                     u51 0128                       u60 0034                       u61 0033  
                     u70 0046                       u71 0045                       u80 0054  
                     u81 0053                       u90 0062                       u91 0061  
                    l104 012E                      l700 003D                      l712 0059  
                    l800 0113                      l650 00AD                      l714 0062  
                    l706 004B                      l810 00E3                      l802 00CF  
                    l660 00C1                      l652 00B1                      l812 00E8  
                    l804 00D4                      l670 00CC                      l662 00C2  
                    l654 00B4                      l718 0066                      l814 00EE  
                    l806 00D8                      l672 00CD                      l664 00C3  
                    l656 00BA                      l648 00A5                      l760 0075  
                    l808 00D9                      l666 00C7                      l658 00BE  
                    l770 008F                      l762 007E                      l690 012D  
                    l668 00CB                      l692 0020                      l772 0098  
                    l764 007F                      l684 0115                      l694 002B  
                    l766 0088                      l686 011E                      l696 0034  
                    l768 008A                      l776 009C                      l792 00F7  
                    l688 0129                      l698 0036                      l794 0109  
                    l796 010B                      l798 010C                      u200 0113  
                    u201 0112                      u210 00D8                      u211 00D7  
                    u220 00E8                      u221 00E7                      u150 0088  
                    u151 0087                      u160 0098                      u161 0097  
                    u190 0109                      u191 0108                      _isr 012F  
                   ?_isr 0078                     i1l42 0139                     _TMR0 0001  
                   _main 00CF                     btemp 007E                     start 000C  
                  ??_isr 0078                    ?_main 0078                    _ANSEL 0188  
                  i1l740 0133                    i1l742 0134                    i1l744 0138  
                  i1l738 012F                    u12_20 0133                    u12_21 0132  
                  _PORTD 0008                    _TRISD 0088          __end_of_taskAPP 0075  
        __end_of_taskLED 0115          __end_of_taskERR 00A5          __end_of_taskSW1 012F  
         __pbitbssCOMMON 03D8                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 000F             __end_of_main 00F7  
                 ??_main 007B                   _ANSELH 0189                   _sw1sta 0077  
                 _tickms 03D8                ??_taskAPP 007A                ??_taskLED 0022  
              ??_taskERR 007A         __end_of_setupMCU 00CF                ??_taskSW1 007A  
                 saved_w 007E  __end_of__initialization 001C           __pcstackCOMMON 0078  
         _OPTION_REGbits 0081              taskAPP@tcnt 0070              taskLED@tcnt 0072  
             __pbssBANK0 0020              taskERR@tcnt 0020               __pmaintext 00CF  
            taskSW1@tcnt 0074               __pintentry 0004                ?_setupMCU 0078  
                __ptext1 0115                  __ptext2 00F7                  __ptext3 0075  
                __ptext4 0020                  __ptext5 00A5                  __ptext6 012F  
                _taskAPP 0020                  _taskLED 00F7                  _taskERR 0075  
                _taskSW1 0115     end_of_initialization 001C               ??_setupMCU 007A  
              _PORTBbits 0006                _PORTEbits 0009                _TRISEbits 0089  
    start_initialization 000F              __end_of_isr 0140             taskAPP@state 0076  
            __pbssCOMMON 0070                ___latbits 0002            __pcstackBANK0 0022  
           taskERR@state 0075                 ?_taskAPP 0078                 ?_taskLED 0078  
               ?_taskERR 0078                 ?_taskSW1 0078        interrupt_function 0004  
               _setupMCU 00A5               _INTCONbits 000B                 intlevel1 0000  
             _OSCCONbits 008F  
